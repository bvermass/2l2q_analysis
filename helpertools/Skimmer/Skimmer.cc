#include "Skimmer.h"

void Skimmer::Init_input_branches(TTree* tree)
{
    if(!tree){
        std::cout << "Error: Input tree can't be initialized because it doesn't seem to exist" << std::endl;
        return;
    }
    tree->SetMakeClass(1);

    tree->SetBranchAddress("_runNb", &i_runNb, &bi__runNb);
    tree->SetBranchAddress("_lumiBlock", &i_lumiBlock, &bi__lumiBlock);
    tree->SetBranchAddress("_eventNb", &i_eventNb, &bi__eventNb);
    tree->SetBranchAddress("_nVertex", &i_nVertex, &bi__nVertex);
    tree->SetBranchAddress("_is2017", &i_is2017, &bi__is2017);
    tree->SetBranchAddress("_is2018", &i_is2018, &bi__is2018);
    tree->SetBranchAddress("_BS_x", &i_BS_x, &bi__BS_x);
    tree->SetBranchAddress("_BS_y", &i_BS_y, &bi__BS_y);
    tree->SetBranchAddress("_BS_z", &i_BS_z, &bi__BS_z);
    tree->SetBranchAddress("_BS_xErr", &i_BS_xErr, &bi__BS_xErr);
    tree->SetBranchAddress("_BS_yErr", &i_BS_yErr, &bi__BS_yErr);
    tree->SetBranchAddress("_BS_zErr", &i_BS_zErr, &bi__BS_zErr);
    tree->SetBranchAddress("_PV_x", &i_PV_x, &bi__PV_x);
    tree->SetBranchAddress("_PV_y", &i_PV_y, &bi__PV_y);
    tree->SetBranchAddress("_PV_z", &i_PV_z, &bi__PV_z);
    tree->SetBranchAddress("_PV_xErr", &i_PV_xErr, &bi__PV_xErr);
    tree->SetBranchAddress("_PV_yErr", &i_PV_yErr, &bi__PV_yErr);
    tree->SetBranchAddress("_PV_zErr", &i_PV_zErr, &bi__PV_zErr);
    if(!isData){
         tree->SetBranchAddress("_prefireWeight", &i_prefireWeight, &bi__prefireWeight);
         tree->SetBranchAddress("_prefireWeightUp", &i_prefireWeightUp, &bi__prefireWeightUp);
         tree->SetBranchAddress("_prefireWeightDown", &i_prefireWeightDown, &bi__prefireWeightDown);
         tree->SetBranchAddress("_nTrueInt", &i_nTrueInt, &bi__nTrueInt);
         tree->SetBranchAddress("_weight", &i_weight, &bi__weight);
         tree->SetBranchAddress("_lheHTIncoming", &i_lheHTIncoming, &bi__lheHTIncoming);
         tree->SetBranchAddress("_ctauHN", &i_ctauHN, &bi__ctauHN);
         tree->SetBranchAddress("_nLheTau", &i_nLheTau, &bi__nLheTau);
         tree->SetBranchAddress("_nLheWeights", &i_nLheWeights, &bi__nLheWeights);
         tree->SetBranchAddress("_lheWeight", i_lheWeight, &bi__lheWeight);
         tree->SetBranchAddress("_nPsWeights", &i_nPsWeights, &bi__nPsWeights);
         tree->SetBranchAddress("_psWeight", i_psWeight, &bi__psWeight);
         tree->SetBranchAddress("_ttgEventType", &i_ttgEventType, &bi__ttgEventType);
         tree->SetBranchAddress("_zgEventType", &i_zgEventType, &bi__zgEventType);
         tree->SetBranchAddress("_gen_met", &i_gen_met, &bi__gen_met);
         tree->SetBranchAddress("_gen_metPhi", &i_gen_metPhi, &bi__gen_metPhi);
         tree->SetBranchAddress("_gen_nPh", &i_gen_nPh, &bi__gen_nPh);
         tree->SetBranchAddress("_gen_phStatus", i_gen_phStatus, &bi__gen_phStatus);
         tree->SetBranchAddress("_gen_phPt", i_gen_phPt, &bi__gen_phPt);
         tree->SetBranchAddress("_gen_phEta", i_gen_phEta, &bi__gen_phEta);
         tree->SetBranchAddress("_gen_phPhi", i_gen_phPhi, &bi__gen_phPhi);
         tree->SetBranchAddress("_gen_phE", i_gen_phE, &bi__gen_phE);
         tree->SetBranchAddress("_gen_phMomPdg", i_gen_phMomPdg, &bi__gen_phMomPdg);
         tree->SetBranchAddress("_gen_phIsPrompt", i_gen_phIsPrompt, &bi__gen_phIsPrompt);
         tree->SetBranchAddress("_gen_phMinDeltaR", i_gen_phMinDeltaR, &bi__gen_phMinDeltaR);
         tree->SetBranchAddress("_gen_phPassParentage", i_gen_phPassParentage, &bi__gen_phPassParentage);
         tree->SetBranchAddress("_gen_nL", &i_gen_nL, &bi__gen_nL);
         tree->SetBranchAddress("_gen_lPt", i_gen_lPt, &bi__gen_lPt);
         tree->SetBranchAddress("_gen_lEta", i_gen_lEta, &bi__gen_lEta);
         tree->SetBranchAddress("_gen_lPhi", i_gen_lPhi, &bi__gen_lPhi);
         tree->SetBranchAddress("_gen_lE", i_gen_lE, &bi__gen_lE);
         tree->SetBranchAddress("_gen_lFlavor", i_gen_lFlavor, &bi__gen_lFlavor);
         tree->SetBranchAddress("_gen_lCharge", i_gen_lCharge, &bi__gen_lCharge);
         tree->SetBranchAddress("_gen_lMomPdg", i_gen_lMomPdg, &bi__gen_lMomPdg);
         tree->SetBranchAddress("_gen_vertex_x", i_gen_vertex_x, &bi__gen_vertex_x);
         tree->SetBranchAddress("_gen_vertex_y", i_gen_vertex_y, &bi__gen_vertex_y);
         tree->SetBranchAddress("_gen_vertex_z", i_gen_vertex_z, &bi__gen_vertex_z);
         tree->SetBranchAddress("_gen_lIsPrompt", i_gen_lIsPrompt, &bi__gen_lIsPrompt);
         tree->SetBranchAddress("_gen_lDecayedHadr", i_gen_lDecayedHadr, &bi__gen_lDecayedHadr);
         tree->SetBranchAddress("_gen_lMinDeltaR", i_gen_lMinDeltaR, &bi__gen_lMinDeltaR);
         tree->SetBranchAddress("_gen_lPassParentage", i_gen_lPassParentage, &bi__gen_lPassParentage);
         tree->SetBranchAddress("_gen_nN", &i_gen_nN, &bi__gen_nN);
         tree->SetBranchAddress("_gen_NPt", &i_gen_NPt, &bi__gen_NPt);
         tree->SetBranchAddress("_gen_NEta", &i_gen_NEta, &bi__gen_NEta);
         tree->SetBranchAddress("_gen_NPhi", &i_gen_NPhi, &bi__gen_NPhi);
         tree->SetBranchAddress("_gen_NE", &i_gen_NE, &bi__gen_NE);
         tree->SetBranchAddress("_gen_Nvertex_x", &i_gen_Nvertex_x, &bi__gen_Nvertex_x);
         tree->SetBranchAddress("_gen_Nvertex_y", &i_gen_Nvertex_y, &bi__gen_Nvertex_y);
         tree->SetBranchAddress("_gen_Nvertex_z", &i_gen_Nvertex_z, &bi__gen_Nvertex_z);
         tree->SetBranchAddress("_gen_nNPackedDtrs", &i_gen_nNPackedDtrs, &bi__gen_nNPackedDtrs);
         tree->SetBranchAddress("_gen_NPackedDtrsPt", &i_gen_NPackedDtrsPt, &bi__gen_NPackedDtrsPt);
         tree->SetBranchAddress("_gen_NPackedDtrsEta", &i_gen_NPackedDtrsEta, &bi__gen_NPackedDtrsEta);
         tree->SetBranchAddress("_gen_NPackedDtrsPhi", &i_gen_NPackedDtrsPhi, &bi__gen_NPackedDtrsPhi);
         tree->SetBranchAddress("_gen_NPackedDtrsE", &i_gen_NPackedDtrsE, &bi__gen_NPackedDtrsE);
         tree->SetBranchAddress("_gen_NPackedDtrsPdgId", &i_gen_NPackedDtrsPdgId, &bi__gen_NPackedDtrsPdgId);
         tree->SetBranchAddress("_gen_NPackedDtrsCharge", &i_gen_NPackedDtrsCharge, &bi__gen_NPackedDtrsCharge);
         tree->SetBranchAddress("_gen_nNdaughters", &i_gen_nNdaughters, &bi__gen_nNdaughters);
         tree->SetBranchAddress("_gen_Ndaughters_pdg", i_gen_Ndaughters_pdg, &bi__gen_Ndaughters_pdg);
         tree->SetBranchAddress("_gen_Ndaughters_Pt", &i_gen_Ndaughters_Pt, &bi__gen_Ndaughters_Pt);
         tree->SetBranchAddress("_gen_Ndaughters_Eta", &i_gen_Ndaughters_Eta, &bi__gen_Ndaughters_Eta);
         tree->SetBranchAddress("_gen_Ndaughters_Phi", &i_gen_Ndaughters_Phi, &bi__gen_Ndaughters_Phi);
         tree->SetBranchAddress("_gen_Ndaughters_E", &i_gen_Ndaughters_E, &bi__gen_Ndaughters_E);
         tree->SetBranchAddress("_gen_Ndaughters_Charge", &i_gen_Ndaughters_Charge, &bi__gen_Ndaughters_Charge);
         tree->SetBranchAddress("_gen_nq", &i_gen_nq, &bi__gen_nq);
         tree->SetBranchAddress("_gen_qPt", i_gen_qPt, &bi__gen_qPt);
         tree->SetBranchAddress("_gen_qEta", i_gen_qEta, &bi__gen_qEta);
         tree->SetBranchAddress("_gen_qPhi", i_gen_qPhi, &bi__gen_qPhi);
         tree->SetBranchAddress("_gen_qE", i_gen_qE, &bi__gen_qE);
    }
    tree->SetBranchAddress("_HLT_Ele27_WPTight_Gsf", &i_HLT_Ele27_WPTight_Gsf, &bi__HLT_Ele27_WPTight_Gsf);
    tree->SetBranchAddress("_HLT_Ele27_WPTight_Gsf_prescale", &i_HLT_Ele27_WPTight_Gsf_prescale, &bi__HLT_Ele27_WPTight_Gsf_prescale);
    tree->SetBranchAddress("_HLT_Ele32_WPTight_Gsf", &i_HLT_Ele32_WPTight_Gsf, &bi__HLT_Ele32_WPTight_Gsf);
    tree->SetBranchAddress("_HLT_Ele32_WPTight_Gsf_prescale", &i_HLT_Ele32_WPTight_Gsf_prescale, &bi__HLT_Ele32_WPTight_Gsf_prescale);
    tree->SetBranchAddress("_HLT_IsoMu24", &i_HLT_IsoMu24, &bi__HLT_IsoMu24);
    tree->SetBranchAddress("_HLT_IsoMu24_prescale", &i_HLT_IsoMu24_prescale, &bi__HLT_IsoMu24_prescale);
    tree->SetBranchAddress("_HLT_IsoTkMu24", &i_HLT_IsoTkMu24, &bi__HLT_IsoTkMu24);
    tree->SetBranchAddress("_HLT_IsoTkMu24_prescale", &i_HLT_IsoTkMu24_prescale, &bi__HLT_IsoTkMu24_prescale);
    tree->SetBranchAddress("_HLT_IsoMu27", &i_HLT_IsoMu27, &bi__HLT_IsoMu27);
    tree->SetBranchAddress("_HLT_IsoMu27_prescale", &i_HLT_IsoMu27_prescale, &bi__HLT_IsoMu27_prescale);
    tree->SetBranchAddress("_HLT_IsoMu24_eta2p1", &i_HLT_IsoMu24_eta2p1, &bi__HLT_IsoMu24_eta2p1);
    tree->SetBranchAddress("_HLT_IsoMu24_eta2p1_prescale", &i_HLT_IsoMu24_eta2p1_prescale, &bi__HLT_IsoMu24_eta2p1_prescale);
    tree->SetBranchAddress("_HLT_MET200", &i_HLT_MET200, &bi__HLT_MET200);
    tree->SetBranchAddress("_HLT_MET200_prescale", &i_HLT_MET200_prescale, &bi__HLT_MET200_prescale);
    tree->SetBranchAddress("_HLT_PFMET300", &i_HLT_PFMET300, &bi__HLT_PFMET300);
    tree->SetBranchAddress("_HLT_PFMET300_prescale", &i_HLT_PFMET300_prescale, &bi__HLT_PFMET300_prescale);
    tree->SetBranchAddress("_HLT_PFMET170_HBHECleaned", &i_HLT_PFMET170_HBHECleaned, &bi__HLT_PFMET170_HBHECleaned);
    tree->SetBranchAddress("_HLT_PFMET170_HBHECleaned_prescale", &i_HLT_PFMET170_HBHECleaned_prescale, &bi__HLT_PFMET170_HBHECleaned_prescale);
    tree->SetBranchAddress("_HLT_PFMET120_PFMHT120_IDTight", &i_HLT_PFMET120_PFMHT120_IDTight, &bi__HLT_PFMET120_PFMHT120_IDTight);
    tree->SetBranchAddress("_HLT_PFMET120_PFMHT120_IDTight_prescale", &i_HLT_PFMET120_PFMHT120_IDTight_prescale, &bi__HLT_PFMET120_PFMHT120_IDTight_prescale);
    tree->SetBranchAddress("_HLT_PFMET140_PFMHT140_IDTight", &i_HLT_PFMET140_PFMHT140_IDTight, &bi__HLT_PFMET140_PFMHT140_IDTight);
    tree->SetBranchAddress("_HLT_PFMET140_PFMHT140_IDTight_prescale", &i_HLT_PFMET140_PFMHT140_IDTight_prescale, &bi__HLT_PFMET140_PFMHT140_IDTight_prescale);
    tree->SetBranchAddress("_HLT_CaloMET350_HBHECleaned", &i_HLT_CaloMET350_HBHECleaned, &bi__HLT_CaloMET350_HBHECleaned);
    tree->SetBranchAddress("_HLT_CaloMET350_HBHECleaned_prescale", &i_HLT_CaloMET350_HBHECleaned_prescale, &bi__HLT_CaloMET350_HBHECleaned_prescale);
    tree->SetBranchAddress("_HLT_PFMET250_HBHECleaned", &i_HLT_PFMET250_HBHECleaned, &bi__HLT_PFMET250_HBHECleaned);
    tree->SetBranchAddress("_HLT_PFMET250_HBHECleaned_prescale", &i_HLT_PFMET250_HBHECleaned_prescale, &bi__HLT_PFMET250_HBHECleaned_prescale);
    tree->SetBranchAddress("_HLT_PFMET200_HBHE_BeamHaloCleaned", &i_HLT_PFMET200_HBHE_BeamHaloCleaned, &bi__HLT_PFMET200_HBHE_BeamHaloCleaned);
    tree->SetBranchAddress("_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale", &i_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale, &bi__HLT_PFMET200_HBHE_BeamHaloCleaned_prescale);
    tree->SetBranchAddress("_HLT_PFMETTypeOne140_PFMHT140_IDTight", &i_HLT_PFMETTypeOne140_PFMHT140_IDTight, &bi__HLT_PFMETTypeOne140_PFMHT140_IDTight);
    tree->SetBranchAddress("_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale", &i_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale, &bi__HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale);
    tree->SetBranchAddress("_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned", &i_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned, &bi__HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned);
    tree->SetBranchAddress("_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale", &i_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale, &bi__HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale);
    tree->SetBranchAddress("_passMETFilters", &i_passMETFilters, &bi__passMETFilters);
    tree->SetBranchAddress("_Flag_goodVertices", &i_Flag_goodVertices, &bi__Flag_goodVertices);
    tree->SetBranchAddress("_Flag_HBHENoiseFilter", &i_Flag_HBHENoiseFilter, &bi__Flag_HBHENoiseFilter);
    tree->SetBranchAddress("_Flag_HBHENoiseIsoFilter", &i_Flag_HBHENoiseIsoFilter, &bi__Flag_HBHENoiseIsoFilter);
    tree->SetBranchAddress("_Flag_EcalDeadCellTriggerPrimitiveFilter", &i_Flag_EcalDeadCellTriggerPrimitiveFilter, &bi__Flag_EcalDeadCellTriggerPrimitiveFilter);
    tree->SetBranchAddress("_Flag_BadPFMuonFilter", &i_Flag_BadPFMuonFilter, &bi__Flag_BadPFMuonFilter);
    tree->SetBranchAddress("_Flag_BadChargedCandidateFilter", &i_Flag_BadChargedCandidateFilter, &bi__Flag_BadChargedCandidateFilter);
    tree->SetBranchAddress("_Flag_globalSuperTightHalo2016Filter", &i_Flag_globalSuperTightHalo2016Filter, &bi__Flag_globalSuperTightHalo2016Filter);
    //tree->SetBranchAddress("_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL", &i_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL, &bi__HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL);
    //tree->SetBranchAddress("_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_prescale", &i_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_prescale, &bi__HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_prescale);
    //tree->SetBranchAddress("_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ", &i_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ, &bi__HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ);
    //tree->SetBranchAddress("_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &i_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale, &bi__HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_Mu8_DiEle12_CaloIdL_TrackIdL", &i_HLT_Mu8_DiEle12_CaloIdL_TrackIdL, &bi__HLT_Mu8_DiEle12_CaloIdL_TrackIdL);
    //tree->SetBranchAddress("_HLT_Mu8_DiEle12_CaloIdL_TrackIdL_prescale", &i_HLT_Mu8_DiEle12_CaloIdL_TrackIdL_prescale, &bi__HLT_Mu8_DiEle12_CaloIdL_TrackIdL_prescale);
    //tree->SetBranchAddress("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ", &i_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ, &bi__HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ);
    //tree->SetBranchAddress("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &i_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_prescale, &bi__HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL", &i_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL, &bi__HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL);
    //tree->SetBranchAddress("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_prescale", &i_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_prescale, &bi__HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_prescale);
    //tree->SetBranchAddress("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ", &i_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ, &bi__HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ);
    //tree->SetBranchAddress("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &i_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_prescale, &bi__HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL", &i_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL, &bi__HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL);
    //tree->SetBranchAddress("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_prescale", &i_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_prescale, &bi__HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_prescale);
    //tree->SetBranchAddress("_HLT_DiMu9_Ele9_CaloIdL_TrackIdL", &i_HLT_DiMu9_Ele9_CaloIdL_TrackIdL, &bi__HLT_DiMu9_Ele9_CaloIdL_TrackIdL);
    //tree->SetBranchAddress("_HLT_DiMu9_Ele9_CaloIdL_TrackIdL_prescale", &i_HLT_DiMu9_Ele9_CaloIdL_TrackIdL_prescale, &bi__HLT_DiMu9_Ele9_CaloIdL_TrackIdL_prescale);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ", &i_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ, &bi__HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_prescale", &i_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_prescale, &bi__HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ", &i_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ, &bi__HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale", &i_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale, &bi__HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ", &i_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ, &bi__HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ);
    //tree->SetBranchAddress("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale", &i_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale, &bi__HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL", &i_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL, &bi__HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_prescale", &i_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_prescale, &bi__HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_prescale);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL", &i_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL, &bi__HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL);
    //tree->SetBranchAddress("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale", &i_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale, &bi__HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale);
    //tree->SetBranchAddress("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL", &i_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL, &bi__HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL);
    //tree->SetBranchAddress("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale", &i_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale, &bi__HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale);
    //tree->SetBranchAddress("_HLT_TripleMu_12_10_5", &i_HLT_TripleMu_12_10_5, &bi__HLT_TripleMu_12_10_5);
    //tree->SetBranchAddress("_HLT_TripleMu_12_10_5_prescale", &i_HLT_TripleMu_12_10_5_prescale, &bi__HLT_TripleMu_12_10_5_prescale);
    //tree->SetBranchAddress("_passMETFilters", &i_passMETFilters, &bi__passMETFilters);
    //tree->SetBranchAddress("_Flag_HBHENoiseFilter", &i_Flag_HBHENoiseFilter, &bi__Flag_HBHENoiseFilter);
    //tree->SetBranchAddress("_Flag_HBHENoiseIsoFilter", &i_Flag_HBHENoiseIsoFilter, &bi__Flag_HBHENoiseIsoFilter);
    //tree->SetBranchAddress("_Flag_EcalDeadCellTriggerPrimitiveFilter", &i_Flag_EcalDeadCellTriggerPrimitiveFilter, &bi__Flag_EcalDeadCellTriggerPrimitiveFilter);
    //tree->SetBranchAddress("_Flag_goodVertices", &i_Flag_goodVertices, &bi__Flag_goodVertices);
    //tree->SetBranchAddress("_Flag_globalTightHalo2016Filter", &i_Flag_globalTightHalo2016Filter, &bi__Flag_globalTightHalo2016Filter);
    //tree->SetBranchAddress("_Flag_BadPFMuonFilter", &i_Flag_BadPFMuonFilter, &bi__Flag_BadPFMuonFilter);
    //tree->SetBranchAddress("_Flag_BadChargedCandidateFilter", &i_Flag_BadChargedCandidateFilter, &bi__Flag_BadChargedCandidateFilter);
    //tree->SetBranchAddress("_HLT_Ele105_CaloIdVT_GsfTrkIdT", &i_HLT_Ele105_CaloIdVT_GsfTrkIdT, &bi__HLT_Ele105_CaloIdVT_GsfTrkIdT);
    //tree->SetBranchAddress("_HLT_Ele105_CaloIdVT_GsfTrkIdT_prescale", &i_HLT_Ele105_CaloIdVT_GsfTrkIdT_prescale, &bi__HLT_Ele105_CaloIdVT_GsfTrkIdT_prescale);
    //tree->SetBranchAddress("_HLT_Ele115_CaloIdVT_GsfTrkIdT", &i_HLT_Ele115_CaloIdVT_GsfTrkIdT, &bi__HLT_Ele115_CaloIdVT_GsfTrkIdT);
    //tree->SetBranchAddress("_HLT_Ele115_CaloIdVT_GsfTrkIdT_prescale", &i_HLT_Ele115_CaloIdVT_GsfTrkIdT_prescale, &bi__HLT_Ele115_CaloIdVT_GsfTrkIdT_prescale);
    //tree->SetBranchAddress("_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ", &i_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ, &bi__HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ);
    //tree->SetBranchAddress("_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &i_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale, &bi__HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale);
    //tree->SetBranchAddress("_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL", &i_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL, &bi__HLT_DoubleEle33_CaloIdL_GsfTrkIdVL);
    //tree->SetBranchAddress("_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_prescale", &i_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_prescale, &bi__HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_prescale);
    //tree->SetBranchAddress("_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL", &i_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL, &bi__HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL);
    //tree->SetBranchAddress("_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_prescale", &i_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_prescale, &bi__HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_prescale);
    //tree->SetBranchAddress("_HLT_Mu50", &i_HLT_Mu50, &bi__HLT_Mu50);
    //tree->SetBranchAddress("_HLT_Mu50_prescale", &i_HLT_Mu50_prescale, &bi__HLT_Mu50_prescale);
    //tree->SetBranchAddress("_HLT_TkMu50", &i_HLT_TkMu50, &bi__HLT_TkMu50);
    //tree->SetBranchAddress("_HLT_TkMu50_prescale", &i_HLT_TkMu50_prescale, &bi__HLT_TkMu50_prescale);
    //tree->SetBranchAddress("_HLT_Mu45_eta2p1", &i_HLT_Mu45_eta2p1, &bi__HLT_Mu45_eta2p1);
    //tree->SetBranchAddress("_HLT_Mu45_eta2p1_prescale", &i_HLT_Mu45_eta2p1_prescale, &bi__HLT_Mu45_eta2p1_prescale);
    //tree->SetBranchAddress("_HLT_Mu30_TkMu11", &i_HLT_Mu30_TkMu11, &bi__HLT_Mu30_TkMu11);
    //tree->SetBranchAddress("_HLT_Mu30_TkMu11_prescale", &i_HLT_Mu30_TkMu11_prescale, &bi__HLT_Mu30_TkMu11_prescale);
    tree->SetBranchAddress("_nL", &i_nL, &bi__nL);
    tree->SetBranchAddress("_nMu", &i_nMu, &bi__nMu);
    tree->SetBranchAddress("_nEle", &i_nEle, &bi__nEle);
    tree->SetBranchAddress("_nLight", &i_nLight, &bi__nLight);
    tree->SetBranchAddress("_nTau", &i_nTau, &bi__nTau);
    tree->SetBranchAddress("_lPt", i_lPt, &bi__lPt);
    tree->SetBranchAddress("_lEta", i_lEta, &bi__lEta);
    tree->SetBranchAddress("_lEtaSC", i_lEtaSC, &bi__lEtaSC);
    tree->SetBranchAddress("_lPhi", i_lPhi, &bi__lPhi);
    tree->SetBranchAddress("_lE", i_lE, &bi__lE);
    tree->SetBranchAddress("_lFlavor", i_lFlavor, &bi__lFlavor);
    tree->SetBranchAddress("_lCharge", i_lCharge, &bi__lCharge);
    tree->SetBranchAddress("_dxy", i_dxy, &bi__dxy);
    tree->SetBranchAddress("_dz", i_dz, &bi__dz);
    tree->SetBranchAddress("_3dIP", i_3dIP, &bi__3dIP);
    tree->SetBranchAddress("_3dIPSig", i_3dIPSig, &bi__3dIPSig);
    tree->SetBranchAddress("_lElectronSummer16MvaGP", i_lElectronSummer16MvaGP, &bi__lElectronSummer16MvaGP);
    tree->SetBranchAddress("_lElectronSummer16MvaHZZ", i_lElectronSummer16MvaHZZ, &bi__lElectronSummer16MvaHZZ);
    tree->SetBranchAddress("_lElectronMvaFall17v1NoIso", i_lElectronMvaFall17v1NoIso, &bi__lElectronMvaFall17v1NoIso);
    tree->SetBranchAddress("_lElectronMvaFall17Iso", i_lElectronMvaFall17Iso, &bi__lElectronMvaFall17Iso);
    tree->SetBranchAddress("_lElectronMvaFall17NoIso", i_lElectronMvaFall17NoIso, &bi__lElectronMvaFall17NoIso);
    tree->SetBranchAddress("_lElectronPassEmu", i_lElectronPassEmu, &bi__lElectronPassEmu);
    tree->SetBranchAddress("_lElectronPassConvVeto", i_lElectronPassConvVeto, &bi__lElectronPassConvVeto);
    tree->SetBranchAddress("_lElectronChargeConst", i_lElectronChargeConst, &bi__lElectronChargeConst);
    tree->SetBranchAddress("_lElectronMissingHits", i_lElectronMissingHits, &bi__lElectronMissingHits);
    tree->SetBranchAddress("_lElectronIsEB", i_lElectronIsEB, &bi__lElectronIsEB);
    tree->SetBranchAddress("_lElectronIsEE", i_lElectronIsEE, &bi__lElectronIsEE);
    tree->SetBranchAddress("_lElectronSuperClusterOverP", i_lElectronSuperClusterOverP, &bi__lElectronSuperClusterOverP);
    tree->SetBranchAddress("_lElectronEcalEnergy", i_lElectronEcalEnergy, &bi__lElectronEcalEnergy);
    tree->SetBranchAddress("_lElectronSigmaIetaIeta", i_lElectronSigmaIetaIeta, &bi__lElectronSigmaIetaIeta);
    tree->SetBranchAddress("_lElectronDEtaInSeed", i_lElectronDEtaInSeed, &bi__lElectronDEtaInSeed);
    tree->SetBranchAddress("_lElectronDeltaPhiSuperClusterTrack", i_lElectronDeltaPhiSuperClusterTrack, &bi__lElectronDeltaPhiSuperClusterTrack);
    tree->SetBranchAddress("_lElectronDeltaEtaSuperClusterTrack", i_lElectronDeltaEtaSuperClusterTrack, &bi__lElectronDeltaEtaSuperClusterTrack);
    tree->SetBranchAddress("_lElectronHOverE", i_lElectronHOverE, &bi__lElectronHOverE);
    tree->SetBranchAddress("_lElectronEInvMinusPInv", i_lElectronEInvMinusPInv, &bi__lElectronEInvMinusPInv);
    tree->SetBranchAddress("_lElectronNumberInnerHitsMissing", i_lElectronNumberInnerHitsMissing, &bi__lElectronNumberInnerHitsMissing);
    tree->SetBranchAddress("_leptonMvaTTH", i_leptonMvaTTH, &bi__leptonMvaTTH);
    tree->SetBranchAddress("_leptonMvatZq", i_leptonMvatZq, &bi__leptonMvatZq);
    if(tree->FindBranch("_leptonMvaTOP")){
        std::cout << "found the TOP Lepton Mva branch" << std::endl;
        tree->SetBranchAddress("_leptonMvaTOP", i_leptonMvaTOP, &bi__leptonMvaTOP);
        hasLeptonMvaTOP = true;
    }else {
        std::cout << "no Lepton Mva branch found, computing one" << std::endl;
        hasLeptonMvaTOP = false;
    }
    tree->SetBranchAddress("_lPOGVeto", i_lPOGVeto, &bi__lPOGVeto);
    tree->SetBranchAddress("_lPOGLoose", i_lPOGLoose, &bi__lPOGLoose);
    tree->SetBranchAddress("_lPOGMedium", i_lPOGMedium, &bi__lPOGMedium);
    tree->SetBranchAddress("_lPOGTight", i_lPOGTight, &bi__lPOGTight);
    tree->SetBranchAddress("_tauMuonVetoLoose", i_tauMuonVetoLoose, &bi__tauMuonVetoLoose);
    tree->SetBranchAddress("_tauEleVetoLoose", i_tauEleVetoLoose, &bi__tauEleVetoLoose);
    tree->SetBranchAddress("_decayModeFinding", i_decayModeFinding, &bi__decayModeFinding);
    tree->SetBranchAddress("_tauAgainstElectronMVA6Raw", i_tauAgainstElectronMVA6Raw, &bi__tauAgainstElectronMVA6Raw);
    tree->SetBranchAddress("_tauCombinedIsoDBRaw3Hits", i_tauCombinedIsoDBRaw3Hits, &bi__tauCombinedIsoDBRaw3Hits);
    tree->SetBranchAddress("_tauIsoMVAPWdR03oldDMwLT", i_tauIsoMVAPWdR03oldDMwLT, &bi__tauIsoMVAPWdR03oldDMwLT);
    tree->SetBranchAddress("_tauIsoMVADBdR03oldDMwLT", i_tauIsoMVADBdR03oldDMwLT, &bi__tauIsoMVADBdR03oldDMwLT);
    tree->SetBranchAddress("_tauIsoMVADBdR03newDMwLT", i_tauIsoMVADBdR03newDMwLT, &bi__tauIsoMVADBdR03newDMwLT);
    tree->SetBranchAddress("_tauIsoMVAPWnewDMwLT", i_tauIsoMVAPWnewDMwLT, &bi__tauIsoMVAPWnewDMwLT);
    tree->SetBranchAddress("_tauIsoMVAPWoldDMwLT", i_tauIsoMVAPWoldDMwLT, &bi__tauIsoMVAPWoldDMwLT);
    tree->SetBranchAddress("_relIso", i_relIso, &bi__relIso);
    tree->SetBranchAddress("_relIso0p4", i_relIso0p4, &bi__relIso0p4);
    tree->SetBranchAddress("_relIso0p4MuDeltaBeta", i_relIso0p4MuDeltaBeta, &bi__relIso0p4MuDeltaBeta);
    tree->SetBranchAddress("_miniIso", i_miniIso, &bi__miniIso);
    tree->SetBranchAddress("_miniIsoCharged", i_miniIsoCharged, &bi__miniIsoCharged);
    tree->SetBranchAddress("_ptRel", i_ptRel, &bi__ptRel);
    tree->SetBranchAddress("_ptRatio", i_ptRatio, &bi__ptRatio);
    tree->SetBranchAddress("_closestJetCsvV2", i_closestJetCsvV2, &bi__closestJetCsvV2);
    tree->SetBranchAddress("_closestJetDeepCsv_b", i_closestJetDeepCsv_b, &bi__closestJetDeepCsv_b);
    tree->SetBranchAddress("_closestJetDeepCsv_bb", i_closestJetDeepCsv_bb, &bi__closestJetDeepCsv_bb);
    tree->SetBranchAddress("_closestJetDeepCsv", i_closestJetDeepCsv, &bi__closestJetDeepCsv);
    tree->SetBranchAddress("_closestJetDeepFlavor_b", i_closestJetDeepFlavor_b, &bi__closestJetDeepFlavor_b);
    tree->SetBranchAddress("_closestJetDeepFlavor_bb", i_closestJetDeepFlavor_bb, &bi__closestJetDeepFlavor_bb);
    tree->SetBranchAddress("_closestJetDeepFlavor_lepb", i_closestJetDeepFlavor_lepb, &bi__closestJetDeepFlavor_lepb);
    tree->SetBranchAddress("_closestJetDeepFlavor", i_closestJetDeepFlavor, &bi__closestJetDeepFlavor);
    tree->SetBranchAddress("_selectedTrackMult", i_selectedTrackMult, &bi__selectedTrackMult);
    //tree->SetBranchAddress("_lKVF_valid", i_lKVF_valid, &bi__lKVF_valid);
    //tree->SetBranchAddress("_lKVF_x", i_lKVF_x, &bi__lKVF_x);
    //tree->SetBranchAddress("_lKVF_y", i_lKVF_y, &bi__lKVF_y);
    //tree->SetBranchAddress("_lKVF_z", i_lKVF_z, &bi__lKVF_z);
    //tree->SetBranchAddress("_lKVF_cxx", i_lKVF_cxx, &bi__lKVF_cxx);
    //tree->SetBranchAddress("_lKVF_cyy", i_lKVF_cyy, &bi__lKVF_cyy);
    //tree->SetBranchAddress("_lKVF_czz", i_lKVF_czz, &bi__lKVF_czz);
    //tree->SetBranchAddress("_lKVF_cyx", i_lKVF_cyx, &bi__lKVF_cyx);
    //tree->SetBranchAddress("_lKVF_czy", i_lKVF_czy, &bi__lKVF_czy);
    //tree->SetBranchAddress("_lKVF_czx", i_lKVF_czx, &bi__lKVF_czx);
    //tree->SetBranchAddress("_lKVF_df", i_lKVF_df, &bi__lKVF_df);
    //tree->SetBranchAddress("_lKVF_chi2", i_lKVF_chi2, &bi__lKVF_chi2);
    //tree->SetBranchAddress("_lKVF_ntracks", i_lKVF_ntracks, &bi__lKVF_ntracks);
    //tree->SetBranchAddress("_lKVF_dRcut", i_lKVF_dRcut, &bi__lKVF_dRcut);
    //tree->SetBranchAddress("_lKVF_trackPt", i_lKVF_trackPt, &bi__lKVF_trackPt);
    //tree->SetBranchAddress("_lKVF_trackEta", i_lKVF_trackEta, &bi__lKVF_trackEta);
    //tree->SetBranchAddress("_lKVF_trackPhi", i_lKVF_trackPhi, &bi__lKVF_trackPhi);
    //tree->SetBranchAddress("_lKVF_trackE", i_lKVF_trackE, &bi__lKVF_trackE);
    //tree->SetBranchAddress("_lKVF_trackdR", i_lKVF_trackdR, &bi__lKVF_trackdR);
    //tree->SetBranchAddress("_lKVF_trackdxy", i_lKVF_trackdxy, &bi__lKVF_trackdxy);
    //tree->SetBranchAddress("_lKVF_trackdz", i_lKVF_trackdz, &bi__lKVF_trackdz);
    tree->SetBranchAddress("_IVF_x", i_IVF_x, &bi__IVF_x);
    tree->SetBranchAddress("_IVF_y", i_IVF_y, &bi__IVF_y);
    tree->SetBranchAddress("_IVF_z", i_IVF_z, &bi__IVF_z);
    tree->SetBranchAddress("_IVF_cx", i_IVF_cx, &bi__IVF_cx);
    tree->SetBranchAddress("_IVF_cy", i_IVF_cy, &bi__IVF_cy);
    tree->SetBranchAddress("_IVF_cz", i_IVF_cz, &bi__IVF_cz);
    tree->SetBranchAddress("_IVF_df", i_IVF_df, &bi__IVF_df);
    tree->SetBranchAddress("_IVF_chi2", i_IVF_chi2, &bi__IVF_chi2);
    tree->SetBranchAddress("_IVF_pt", i_IVF_pt, &bi__IVF_pt);
    tree->SetBranchAddress("_IVF_eta", i_IVF_eta, &bi__IVF_eta);
    tree->SetBranchAddress("_IVF_phi", i_IVF_phi, &bi__IVF_phi);
    tree->SetBranchAddress("_IVF_E", i_IVF_E, &bi__IVF_E);
    tree->SetBranchAddress("_IVF_mass", i_IVF_mass, &bi__IVF_mass);
    tree->SetBranchAddress("_IVF_ntracks", i_IVF_ntracks, &bi__IVF_ntracks);
    tree->SetBranchAddress("_IVF_trackpt", i_IVF_trackpt, &bi__IVF_trackpt);
    tree->SetBranchAddress("_IVF_tracketa", i_IVF_tracketa, &bi__IVF_tracketa);
    tree->SetBranchAddress("_IVF_trackphi", i_IVF_trackphi, &bi__IVF_trackphi);
    tree->SetBranchAddress("_IVF_trackE", i_IVF_trackE, &bi__IVF_trackE);
    tree->SetBranchAddress("_IVF_trackcharge", i_IVF_trackcharge, &bi__IVF_trackcharge);
    tree->SetBranchAddress("_lIVF_match", i_lIVF_match, &bi__lIVF_match);
    tree->SetBranchAddress("_lGlobalMuon", i_lGlobalMuon, &bi__lGlobalMuon);
    tree->SetBranchAddress("_lTrackerMuon", i_lTrackerMuon, &bi__lTrackerMuon);
    tree->SetBranchAddress("_lInnerTrackValidFraction", i_lInnerTrackValidFraction, &bi__lInnerTrackValidFraction);
    tree->SetBranchAddress("_lGlobalTrackNormalizedChi2", i_lGlobalTrackNormalizedChi2, &bi__lGlobalTrackNormalizedChi2);
    tree->SetBranchAddress("_lCQChi2Position", i_lCQChi2Position, &bi__lCQChi2Position);
    tree->SetBranchAddress("_lCQTrackKink", i_lCQTrackKink, &bi__lCQTrackKink);
    tree->SetBranchAddress("_lNumberOfMatchedStation", i_lNumberOfMatchedStation, &bi__lNumberOfMatchedStation);
    tree->SetBranchAddress("_lNumberOfValidPixelHits", i_lNumberOfValidPixelHits, &bi__lNumberOfValidPixelHits);
    tree->SetBranchAddress("_lNumberOfValidTrackerHits", i_lNumberOfValidTrackerHits, &bi__lNumberOfValidTrackerHits);
    tree->SetBranchAddress("_muNumberInnerHits", i_muNumberInnerHits, &bi__muNumberInnerHits);
    tree->SetBranchAddress("_lTrackerLayersWithMeasurement", i_lTrackerLayersWithMeasurement, &bi__lTrackerLayersWithMeasurement);
    tree->SetBranchAddress("_lMuonSegComp", i_lMuonSegComp, &bi__lMuonSegComp);
    tree->SetBranchAddress("_lMuonTrackPt", i_lMuonTrackPt, &bi__lMuonTrackPt);
    tree->SetBranchAddress("_lMuonTrackPtErr", i_lMuonTrackPtErr, &bi__lMuonTrackPtErr);
    tree->SetBranchAddress("_lMuonTimenDof", i_lMuonTimenDof, &bi__lMuonTimenDof);
    tree->SetBranchAddress("_lMuonTime", i_lMuonTime, &bi__lMuonTime);
    tree->SetBranchAddress("_lMuonTimeErr", i_lMuonTimeErr, &bi__lMuonTimeErr);
    tree->SetBranchAddress("_lMuonRPCTimenDof", i_lMuonRPCTimenDof, &bi__lMuonRPCTimenDof);
    tree->SetBranchAddress("_lMuonRPCTime", i_lMuonRPCTime, &bi__lMuonRPCTime);
    tree->SetBranchAddress("_lMuonRPCTimeErr", i_lMuonRPCTimeErr, &bi__lMuonRPCTimeErr);
    if(!isData){
        tree->SetBranchAddress("_lIsPrompt", i_lIsPrompt, &bi__lIsPrompt);
        tree->SetBranchAddress("_lMatchPdgId", i_lMatchPdgId, &bi__lMatchPdgId);
        tree->SetBranchAddress("_lMatchCharge", i_lMatchCharge, &bi__lMatchCharge);
        tree->SetBranchAddress("_tauGenStatus", i_tauGenStatus, &bi__tauGenStatus);
        tree->SetBranchAddress("_lMomPdgId", i_lMomPdgId, &bi__lMomPdgId);
        tree->SetBranchAddress("_lProvenance", i_lProvenance, &bi__lProvenance);
        tree->SetBranchAddress("_lProvenanceCompressed", i_lProvenanceCompressed, &bi__lProvenanceCompressed);
        tree->SetBranchAddress("_lProvenanceConversion", i_lProvenanceConversion, &bi__lProvenanceConversion);
    }
    tree->SetBranchAddress("_lPtCorr", i_lPtCorr, &bi__lPtCorr);
    tree->SetBranchAddress("_lPtScaleUp", i_lPtScaleUp, &bi__lPtScaleUp);
    tree->SetBranchAddress("_lPtScaleDown", i_lPtScaleDown, &bi__lPtScaleDown);
    tree->SetBranchAddress("_lPtResUp", i_lPtResUp, &bi__lPtResUp);
    tree->SetBranchAddress("_lPtResDown", i_lPtResDown, &bi__lPtResDown);
    tree->SetBranchAddress("_nPh", &i_nPh, &bi__nPh);
    tree->SetBranchAddress("_phPt", i_phPt, &bi__phPt);
    tree->SetBranchAddress("_phEta", i_phEta, &bi__phEta);
    tree->SetBranchAddress("_phEtaSC", i_phEtaSC, &bi__phEtaSC);
    tree->SetBranchAddress("_phPhi", i_phPhi, &bi__phPhi);
    tree->SetBranchAddress("_phE", i_phE, &bi__phE);
    tree->SetBranchAddress("_phCutBasedLoose", i_phCutBasedLoose, &bi__phCutBasedLoose);
    tree->SetBranchAddress("_phCutBasedMedium", i_phCutBasedMedium, &bi__phCutBasedMedium);
    tree->SetBranchAddress("_phCutBasedTight", i_phCutBasedTight, &bi__phCutBasedTight);
    tree->SetBranchAddress("_phMva", i_phMva, &bi__phMva);
    tree->SetBranchAddress("_phRandomConeChargedIsolation", i_phRandomConeChargedIsolation, &bi__phRandomConeChargedIsolation);
    tree->SetBranchAddress("_phChargedIsolation", i_phChargedIsolation, &bi__phChargedIsolation);
    tree->SetBranchAddress("_phNeutralHadronIsolation", i_phNeutralHadronIsolation, &bi__phNeutralHadronIsolation);
    tree->SetBranchAddress("_phPhotonIsolation", i_phPhotonIsolation, &bi__phPhotonIsolation);
    tree->SetBranchAddress("_phSigmaIetaIeta", i_phSigmaIetaIeta, &bi__phSigmaIetaIeta);
    tree->SetBranchAddress("_phHadronicOverEm", i_phHadronicOverEm, &bi__phHadronicOverEm);
    tree->SetBranchAddress("_phHadTowOverEm", i_phHadTowOverEm, &bi__phHadTowOverEm);
    tree->SetBranchAddress("_phPassElectronVeto", i_phPassElectronVeto, &bi__phPassElectronVeto);
    tree->SetBranchAddress("_phHasPixelSeed", i_phHasPixelSeed, &bi__phHasPixelSeed);
    if(!isData){
        tree->SetBranchAddress("_phIsPrompt", i_phIsPrompt, &bi__phIsPrompt);
        tree->SetBranchAddress("_phMatchPdgId", i_phMatchPdgId, &bi__phMatchPdgId);
    }
    tree->SetBranchAddress("_phPtCorr", i_phPtCorr, &bi__phPtCorr);
    tree->SetBranchAddress("_phPtScaleUp", i_phPtScaleUp, &bi__phPtScaleUp);
    tree->SetBranchAddress("_phPtScaleDown", i_phPtScaleDown, &bi__phPtScaleDown);
    tree->SetBranchAddress("_phPtResUp", i_phPtResUp, &bi__phPtResUp);
    tree->SetBranchAddress("_phPtResDown", i_phPtResDown, &bi__phPtResDown);
    tree->SetBranchAddress("_nJets", &i_nJets, &bi__nJets);
    tree->SetBranchAddress("_jetPt", i_jetPt, &bi__jetPt);
    tree->SetBranchAddress("_jetPt_JECUp", i_jetPt_JECUp, &bi__jetPt_JECUp);
    tree->SetBranchAddress("_jetPt_JECDown", i_jetPt_JECDown, &bi__jetPt_JECDown);
    tree->SetBranchAddress("_jetPt_Uncorrected", i_jetPt_Uncorrected, &bi__jetPt_Uncorrected);
    tree->SetBranchAddress("_jetPt_L1", i_jetPt_L1, &bi__jetPt_L1);
    tree->SetBranchAddress("_jetPt_L2", i_jetPt_L2, &bi__jetPt_L2);
    tree->SetBranchAddress("_jetPt_L3", i_jetPt_L3, &bi__jetPt_L3);
    tree->SetBranchAddress("_jetSmearedPt", i_jetSmearedPt, &bi__jetSmearedPt);
    tree->SetBranchAddress("_jetSmearedPt_JECDown", i_jetSmearedPt_JECDown, &bi__jetSmearedPt_JECDown);
    tree->SetBranchAddress("_jetSmearedPt_JECUp", i_jetSmearedPt_JECUp, &bi__jetSmearedPt_JECUp);
    tree->SetBranchAddress("_jetSmearedPt_JERDown", i_jetSmearedPt_JERDown, &bi__jetSmearedPt_JERDown);
    tree->SetBranchAddress("_jetSmearedPt_JERUp", i_jetSmearedPt_JERUp, &bi__jetSmearedPt_JERUp);
    tree->SetBranchAddress("_jetEta", i_jetEta, &bi__jetEta);
    tree->SetBranchAddress("_jetPhi", i_jetPhi, &bi__jetPhi);
    tree->SetBranchAddress("_jetE", i_jetE, &bi__jetE);
    tree->SetBranchAddress("_jetCsvV2", i_jetCsvV2, &bi__jetCsvV2);
    tree->SetBranchAddress("_jetDeepCsv_udsg", i_jetDeepCsv_udsg, &bi__jetDeepCsv_udsg);
    tree->SetBranchAddress("_jetDeepCsv_b", i_jetDeepCsv_b, &bi__jetDeepCsv_b);
    tree->SetBranchAddress("_jetDeepCsv_c", i_jetDeepCsv_c, &bi__jetDeepCsv_c);
    tree->SetBranchAddress("_jetDeepCsv_bb", i_jetDeepCsv_bb, &bi__jetDeepCsv_bb);
    tree->SetBranchAddress("_jetDeepCsv", &i_jetDeepCsv, &bi__jetDeepCsv);
    tree->SetBranchAddress("_jetDeepFlavor_b", &i_jetDeepFlavor_b, &bi__jetDeepFlavor_b);
    tree->SetBranchAddress("_jetDeepFlavor_bb", &i_jetDeepFlavor_bb, &bi__jetDeepFlavor_bb);
    tree->SetBranchAddress("_jetDeepFlavor_lepb", &i_jetDeepFlavor_lepb, &bi__jetDeepFlavor_lepb);
    tree->SetBranchAddress("_jetDeepFlavor", &i_jetDeepFlavor, &bi__jetDeepFlavor);
    tree->SetBranchAddress("_jetDeepFlavor_c", &i_jetDeepFlavor_c, &bi__jetDeepFlavor_c);
    tree->SetBranchAddress("_jetDeepFlavor_uds", &i_jetDeepFlavor_uds, &bi__jetDeepFlavor_uds);
    tree->SetBranchAddress("_jetDeepFlavor_g", &i_jetDeepFlavor_g, &bi__jetDeepFlavor_g);
    tree->SetBranchAddress("_jetHadronFlavor", i_jetHadronFlavor, &bi__jetHadronFlavor);
    //tree->SetBranchAddress("_jetIsLoose", i_jetIsLoose, &bi__jetIsLoose);
    tree->SetBranchAddress("_jetIsTight", i_jetIsTight, &bi__jetIsTight);
    tree->SetBranchAddress("_jetIsTightLepVeto", i_jetIsTightLepVeto, &bi__jetIsTightLepVeto);
    tree->SetBranchAddress("_jetNeutralHadronFraction", i_jetNeutralHadronFraction, &bi__jetNeutralHadronFraction);
    tree->SetBranchAddress("_jetChargedHadronFraction", i_jetChargedHadronFraction, &bi__jetChargedHadronFraction);
    tree->SetBranchAddress("_jetNeutralEmFraction", i_jetNeutralEmFraction, &bi__jetNeutralEmFraction);
    tree->SetBranchAddress("_jetChargedEmFraction", i_jetChargedEmFraction, &bi__jetChargedEmFraction);
    tree->SetBranchAddress("_jetHFHadronFraction", i_jetHFHadronFraction, &bi__jetHFHadronFraction);
    tree->SetBranchAddress("_jetHFEmFraction", i_jetHFEmFraction, &bi__jetHFEmFraction);
    tree->SetBranchAddress("_nJetConstituents", i_nJetConstituents, &bi__nJetConstituents);
    tree->SetBranchAddress("_JetConstituentPt", i_JetConstituentPt, &bi__JetConstituentPt);
    tree->SetBranchAddress("_JetConstituentEta", i_JetConstituentEta, &bi__JetConstituentEta);
    tree->SetBranchAddress("_JetConstituentPhi", i_JetConstituentPhi, &bi__JetConstituentPhi);
    tree->SetBranchAddress("_JetConstituentMass", i_JetConstituentMass, &bi__JetConstituentMass);
    tree->SetBranchAddress("_JetConstituentPdgId", i_JetConstituentPdgId, &bi__JetConstituentPdgId);
    tree->SetBranchAddress("_JetConstituentPdgIdReduced", &i_JetConstituentPdgIdReduced, &bi__JetConstituentPdgIdReduced);
    tree->SetBranchAddress("_JetConstituentCharge", i_JetConstituentCharge, &bi__JetConstituentCharge);
    tree->SetBranchAddress("_JetConstituentdxy", i_JetConstituentdxy, &bi__JetConstituentdxy);
    tree->SetBranchAddress("_JetConstituentdz", i_JetConstituentdz, &bi__JetConstituentdz);
    tree->SetBranchAddress("_JetConstituentdxyErr", i_JetConstituentdxyErr, &bi__JetConstituentdxyErr);
    tree->SetBranchAddress("_JetConstituentdzErr", i_JetConstituentdzErr, &bi__JetConstituentdzErr);
    tree->SetBranchAddress("_JetConstituentNumberOfHits", i_JetConstituentNumberOfHits, &bi__JetConstituentNumberOfHits);
    tree->SetBranchAddress("_JetConstituentNumberOfPixelHits", i_JetConstituentNumberOfPixelHits, &bi__JetConstituentNumberOfPixelHits);
    tree->SetBranchAddress("_JetConstituentHasTrack", i_JetConstituentHasTrack, &bi__JetConstituentHasTrack);
    tree->SetBranchAddress("_met", &i_met, &bi__met);
    tree->SetBranchAddress("_metRaw", &i_metRaw, &bi__metRaw);
    tree->SetBranchAddress("_metJECDown", &i_metJECDown, &bi__metJECDown);
    tree->SetBranchAddress("_metJECUp", &i_metJECUp, &bi__metJECUp);
    tree->SetBranchAddress("_metUnclDown", &i_metUnclDown, &bi__metUnclDown);
    tree->SetBranchAddress("_metUnclUp", &i_metUnclUp, &bi__metUnclUp);
    tree->SetBranchAddress("_metPhi", &i_metPhi, &bi__metPhi);
    tree->SetBranchAddress("_metRawPhi", &i_metRawPhi, &bi__metRawPhi);
    tree->SetBranchAddress("_metPhiJECDown", &i_metPhiJECDown, &bi__metPhiJECDown);
    tree->SetBranchAddress("_metPhiJECUp", &i_metPhiJECUp, &bi__metPhiJECUp);
    tree->SetBranchAddress("_metPhiUnclDown", &i_metPhiUnclDown, &bi__metPhiUnclDown);
    tree->SetBranchAddress("_metPhiUnclUp", &i_metPhiUnclUp, &bi__metPhiUnclUp);
    tree->SetBranchAddress("_metSignificance", &i_metSignificance, &bi__metSignificance);
}


void Skimmer::Add_branches(TTree* tree)
{
    tree->Branch("_runNb",                          &o_runNb,                        "_runNb/l");
    tree->Branch("_lumiBlock",                      &o_lumiBlock,                    "_lumiBlock/l");
    tree->Branch("_eventNb",                        &o_eventNb,                      "_eventNb/l");
    tree->Branch("_nVertex",                        &o_nVertex,                      "_nVertex/b");
    tree->Branch("_is2017",                         &o_is2017,                       "_is2017/O");
    tree->Branch("_is2018",                         &o_is2018,                       "_is2018/O");
    tree->Branch("_BS_x",                           &o_BS_x,                         "_BS_x/D");
    tree->Branch("_BS_y",                           &o_BS_y,                         "_BS_y/D");
    tree->Branch("_BS_z",                           &o_BS_z,                         "_BS_z/D");
    tree->Branch("_BS_xErr",                        &o_BS_xErr,                      "_BS_xErr/D");
    tree->Branch("_BS_yErr",                        &o_BS_yErr,                      "_BS_yErr/D");
    tree->Branch("_BS_zErr",                        &o_BS_zErr,                      "_BS_zErr/D");
    tree->Branch("_PV_x",                           &o_PV_x,                         "_PV_x/D");
    tree->Branch("_PV_y",                           &o_PV_y,                         "_PV_y/D");
    tree->Branch("_PV_z",                           &o_PV_z,                         "_PV_z/D");
    tree->Branch("_PV_xErr",                        &o_PV_xErr,                      "_PV_xErr/D");
    tree->Branch("_PV_yErr",                        &o_PV_yErr,                      "_PV_yErr/D");
    tree->Branch("_PV_zErr",                        &o_PV_zErr,                      "_PV_zErr/D");
    if(!isData){
        tree->Branch("_prefireWeight",              &o_prefireWeight,                "_prefireWeight/F");
        tree->Branch("_prefireWeightUp",            &o_prefireWeightUp,              "_prefireWeightUp/F");
        tree->Branch("_prefireWeightDown",          &o_prefireWeightDown,            "_prefireWeightDown/F");

        tree->Branch("_nTrueInt",                       &o_nTrueInt,                     "_nTrueInt/F");
        tree->Branch("_weight",                         &o_weight,                       "_weight/D");
        tree->Branch("_lheHTIncoming",                  &o_lheHTIncoming,                "_lheHTIncoming/D");
        tree->Branch("_ctauHN",                         &o_ctauHN,                       "_ctauHN/D");
        tree->Branch("_nLheTau",                        &o_nLheTau,                      "_nLheTau/i");
        tree->Branch("_nLheWeights",                    &o_nLheWeights,                  "_nLheWeights/i");
        tree->Branch("_lheWeight",                      &o_lheWeight,                    "_lheWeight[_nLheWeights]/D");
        tree->Branch("_nPsWeights",                     &o_nPsWeights,                   "_nPsWeights/i");
        tree->Branch("_psWeight",                       &o_psWeight,                     "_psWeight[_nPsWeights]/D");

        tree->Branch("_ttgEventType",                   &o_ttgEventType,                 "_ttgEventType/i");
        tree->Branch("_zgEventType",                    &o_zgEventType,                  "_zgEventType/i");
        tree->Branch("_gen_met",                        &o_gen_met,                      "_gen_met/D");
        tree->Branch("_gen_metPhi",                     &o_gen_metPhi,                   "_gen_metPhi/D");
        tree->Branch("_gen_nPh",                        &o_gen_nPh,                      "_gen_nPh/i");
        tree->Branch("_gen_phStatus",                   &o_gen_phStatus,                 "_gen_phStatus[_gen_nPh]/i");
        tree->Branch("_gen_phPt",                       &o_gen_phPt,                     "_gen_phPt[_gen_nPh]/D");
        tree->Branch("_gen_phEta",                      &o_gen_phEta,                    "_gen_phEta[_gen_nPh]/D");
        tree->Branch("_gen_phPhi",                      &o_gen_phPhi,                    "_gen_phPhi[_gen_nPh]/D");
        tree->Branch("_gen_phE",                        &o_gen_phE,                      "_gen_phE[_gen_nPh]/D");
        tree->Branch("_gen_phMomPdg",                   &o_gen_phMomPdg,                 "_gen_phMomPdg[_gen_nPh]/I");
        tree->Branch("_gen_phIsPrompt",                 &o_gen_phIsPrompt,               "_gen_phIsPrompt[_gen_nPh]/O");
        tree->Branch("_gen_phMinDeltaR",                &o_gen_phMinDeltaR,              "_gen_phMinDeltaR[_gen_nPh]/D");
        tree->Branch("_gen_phPassParentage",            &o_gen_phPassParentage,          "_gen_phPassParentage[_gen_nPh]/O");
        tree->Branch("_gen_nL",                         &o_gen_nL,                       "_gen_nL/i");
        tree->Branch("_gen_lPt",                        &o_gen_lPt,                      "_gen_lPt[_gen_nL]/D");
        tree->Branch("_gen_lEta",                       &o_gen_lEta,                     "_gen_lEta[_gen_nL]/D");
        tree->Branch("_gen_lPhi",                       &o_gen_lPhi,                     "_gen_lPhi[_gen_nL]/D");
        tree->Branch("_gen_lE",                         &o_gen_lE,                       "_gen_lE[_gen_nL]/D");
        tree->Branch("_gen_lFlavor",                    &o_gen_lFlavor,                  "_gen_lFlavor[_gen_nL]/i");
        tree->Branch("_gen_lCharge",                    &o_gen_lCharge,                  "_gen_lCharge[_gen_nL]/I");
        tree->Branch("_gen_lMomPdg",                    &o_gen_lMomPdg,                  "_gen_lMomPdg[_gen_nL]/I");
        tree->Branch("_gen_vertex_x",                   &o_gen_vertex_x,                 "_gen_vertex_x[_gen_nL]/D");
        tree->Branch("_gen_vertex_y",                   &o_gen_vertex_y,                 "_gen_vertex_y[_gen_nL]/D");
        tree->Branch("_gen_vertex_z",                   &o_gen_vertex_z,                 "_gen_vertex_z[_gen_nL]/D");
        tree->Branch("_gen_lIsPrompt",                  &o_gen_lIsPrompt,                "_gen_lIsPrompt[_gen_nL]/O");
        tree->Branch("_gen_lDecayedHadr",               &o_gen_lDecayedHadr,             "_gen_lDecayedHadr[_gen_nL]/O");
        tree->Branch("_gen_lMinDeltaR",                 &o_gen_lMinDeltaR,               "_gen_lMinDeltaR[_gen_nL]/D");
        tree->Branch("_gen_lPassParentage",             &o_gen_lPassParentage,           "_gen_lPassParentage[_gen_nL]/O");

        //jet stuff
        tree->Branch("_gen_nN",		                    &o_gen_nN,			            "_gen_nN/i");
        tree->Branch("_gen_NPt",		                &o_gen_NPt,			            "_gen_NPt/D");
        tree->Branch("_gen_NEta",		                &o_gen_NEta,			            "_gen_NEta/D");
        tree->Branch("_gen_NPhi",		                &o_gen_NPhi,			            "_gen_NPhi/D");
        tree->Branch("_gen_NE",		   	                &o_gen_NE,			            "_gen_NE/D");
        tree->Branch("_gen_Nvertex_x",		   	        &o_gen_Nvertex_x,			    "_gen_Nvertex_x/D");
        tree->Branch("_gen_Nvertex_y",		   	        &o_gen_Nvertex_y,			    "_gen_Nvertex_y/D");
        tree->Branch("_gen_Nvertex_z",		   	        &o_gen_Nvertex_z,			    "_gen_Nvertex_z/D");

        tree->Branch("_gen_nNPackedDtrs",		        &o_gen_nNPackedDtrs,			    "_gen_nNPackedDtrs/i");
        tree->Branch("_gen_NPackedDtrsPt",		        &o_gen_NPackedDtrsPt,			"_gen_NPackedDtrsPt[_gen_nNPackedDtrs]/D");
        tree->Branch("_gen_NPackedDtrsEta",		        &o_gen_NPackedDtrsEta,		    "_gen_NPackedDtrsEta[_gen_nNPackedDtrs]/D");
        tree->Branch("_gen_NPackedDtrsPhi",		        &o_gen_NPackedDtrsPhi,		    "_gen_NPackedDtrsPhi[_gen_nNPackedDtrs]/D");
        tree->Branch("_gen_NPackedDtrsE",		        &o_gen_NPackedDtrsE,			    "_gen_NPackedDtrsE[_gen_nNPackedDtrs]/D");
        tree->Branch("_gen_NPackedDtrsPdgId",           &o_gen_NPackedDtrsPdgId,	        "_gen_NPackedDtrsPdgId[_gen_nNPackedDtrs]/I");
        tree->Branch("_gen_NPackedDtrsCharge",          &o_gen_NPackedDtrsCharge,	    "_gen_NPackedDtrsCharge[_gen_nNPackedDtrs]/I");
        
        tree->Branch("_gen_nNdaughters",	            &o_gen_nNdaughters,		        "_gen_nNdaughters/i");
        tree->Branch("_gen_Ndaughters_pdg",   	        &o_gen_Ndaughters_pdg,	        "_gen_Ndaughters_pdg[_gen_nNdaughters]/I");
        tree->Branch("_gen_Ndaughters_Pt",   	        &o_gen_Ndaughters_Pt,	        "_gen_Ndaughters_Pt[_gen_nNdaughters]/D");
        tree->Branch("_gen_Ndaughters_Eta",   	        &o_gen_Ndaughters_Eta,           "_gen_Ndaughters_Eta[_gen_nNdaughters]/D");
        tree->Branch("_gen_Ndaughters_Phi",   	        &o_gen_Ndaughters_Phi,           "_gen_Ndaughters_Phi[_gen_nNdaughters]/D");
        tree->Branch("_gen_Ndaughters_E",   	        &o_gen_Ndaughters_E,	            "_gen_Ndaughters_E[_gen_nNdaughters]/D");
        tree->Branch("_gen_Ndaughters_Charge",          &o_gen_Ndaughters_Charge,        "_gen_Ndaughters_Charge[_gen_nNdaughters]/D");
        tree->Branch("_gen_nq",		                    &o_gen_nq,			            "_gen_nq/i");
        tree->Branch("_gen_qPt",		                &o_gen_qPt,			            "_gen_qPt[_gen_nq]/D");
        tree->Branch("_gen_qEta",		                &o_gen_qEta,			            "_gen_qEta[_gen_nq]/D");
        tree->Branch("_gen_qPhi",		                &o_gen_qPhi,			            "_gen_qPhi[_gen_nq]/D");
        tree->Branch("_gen_qE",		   	                &o_gen_qE,			            "_gen_qE[_gen_nq]/D");
    }


    tree->Branch("_HLT_Ele27_WPTight_Gsf", &o_HLT_Ele27_WPTight_Gsf, "_HLT_Ele27_WPTight_Gsf/O");
    tree->Branch("_HLT_Ele27_WPTight_Gsf_prescale", &o_HLT_Ele27_WPTight_Gsf_prescale, "_HLT_Ele27_WPTight_Gsf_prescale/I");
    tree->Branch("_HLT_Ele32_WPTight_Gsf", &o_HLT_Ele32_WPTight_Gsf, "_HLT_Ele32_WPTight_Gsf/O");
    tree->Branch("_HLT_Ele32_WPTight_Gsf_prescale", &o_HLT_Ele32_WPTight_Gsf_prescale, "_HLT_Ele32_WPTight_Gsf_prescale/I");
    tree->Branch("_HLT_IsoMu24", &o_HLT_IsoMu24, "_HLT_IsoMu24/O");
    tree->Branch("_HLT_IsoMu24_prescale", &o_HLT_IsoMu24_prescale, "_HLT_IsoMu24_prescale/I");
    tree->Branch("_HLT_IsoTkMu24", &o_HLT_IsoTkMu24, "_HLT_IsoTkMu24/O");
    tree->Branch("_HLT_IsoTkMu24_prescale", &o_HLT_IsoTkMu24_prescale, "_HLT_IsoTkMu24_prescale/I");
    tree->Branch("_HLT_IsoMu27", &o_HLT_IsoMu27, "_HLT_IsoMu27/O");
    tree->Branch("_HLT_IsoMu27_prescale", &o_HLT_IsoMu27_prescale, "_HLT_IsoMu27_prescale/I");
    tree->Branch("_HLT_IsoMu24_eta2p1", &o_HLT_IsoMu24_eta2p1, "_HLT_IsoMu24_eta2p1/O");
    tree->Branch("_HLT_IsoMu24_eta2p1_prescale", &o_HLT_IsoMu24_eta2p1_prescale, "_HLT_IsoMu24_eta2p1_prescale/I");
    tree->Branch("_HLT_MET200", &o_HLT_MET200, "_HLT_MET200/O");
    tree->Branch("_HLT_MET200_prescale", &o_HLT_MET200_prescale, "_HLT_MET200_prescale/I");
    tree->Branch("_HLT_PFMET300", &o_HLT_PFMET300, "_HLT_PFMET300/O");
    tree->Branch("_HLT_PFMET300_prescale", &o_HLT_PFMET300_prescale, "_HLT_PFMET300_prescale/I");
    tree->Branch("_HLT_PFMET170_HBHECleaned", &o_HLT_PFMET170_HBHECleaned, "_HLT_PFMET170_HBHECleaned/O");
    tree->Branch("_HLT_PFMET170_HBHECleaned_prescale", &o_HLT_PFMET170_HBHECleaned_prescale, "_HLT_PFMET170_HBHECleaned_prescale/I");
    tree->Branch("_HLT_PFMET120_PFMHT120_IDTight", &o_HLT_PFMET120_PFMHT120_IDTight, "_HLT_PFMET120_PFMHT120_IDTight/O");
    tree->Branch("_HLT_PFMET120_PFMHT120_IDTight_prescale", &o_HLT_PFMET120_PFMHT120_IDTight_prescale, "_HLT_PFMET120_PFMHT120_IDTight_prescale/I");
    tree->Branch("_HLT_PFMET140_PFMHT140_IDTight", &o_HLT_PFMET140_PFMHT140_IDTight, "_HLT_PFMET140_PFMHT140_IDTight/O");
    tree->Branch("_HLT_PFMET140_PFMHT140_IDTight_prescale", &o_HLT_PFMET140_PFMHT140_IDTight_prescale, "_HLT_PFMET140_PFMHT140_IDTight_prescale/I");
    tree->Branch("_HLT_CaloMET350_HBHECleaned", &o_HLT_CaloMET350_HBHECleaned, "_HLT_CaloMET350_HBHECleaned/O");
    tree->Branch("_HLT_CaloMET350_HBHECleaned_prescale", &o_HLT_CaloMET350_HBHECleaned_prescale, "_HLT_CaloMET350_HBHECleaned_prescale/I");
    tree->Branch("_HLT_PFMET250_HBHECleaned", &o_HLT_PFMET250_HBHECleaned, "_HLT_PFMET250_HBHECleaned/O");
    tree->Branch("_HLT_PFMET250_HBHECleaned_prescale", &o_HLT_PFMET250_HBHECleaned_prescale, "_HLT_PFMET250_HBHECleaned_prescale/I");
    tree->Branch("_HLT_PFMET200_HBHE_BeamHaloCleaned", &o_HLT_PFMET200_HBHE_BeamHaloCleaned, "_HLT_PFMET200_HBHE_BeamHaloCleaned/O");
    tree->Branch("_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale", &o_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale, "_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale/I");
    tree->Branch("_HLT_PFMETTypeOne140_PFMHT140_IDTight", &o_HLT_PFMETTypeOne140_PFMHT140_IDTight, "_HLT_PFMETTypeOne140_PFMHT140_IDTight/O");
    tree->Branch("_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale", &o_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale, "_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale/I");
    tree->Branch("_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned", &o_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned, "_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned/O");
    tree->Branch("_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale", &o_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale, "_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale/I");
    tree->Branch("_passMETFilters", &o_passMETFilters, "_passMETFilters/O");
    tree->Branch("_Flag_goodVertices", &o_Flag_goodVertices, "_Flag_goodVertices/O");
    tree->Branch("_Flag_HBHENoiseFilter", &o_Flag_HBHENoiseFilter, "_Flag_HBHENoiseFilter/O");
    tree->Branch("_Flag_HBHENoiseIsoFilter", &o_Flag_HBHENoiseIsoFilter, "_Flag_HBHENoiseIsoFilter/O");
    tree->Branch("_Flag_EcalDeadCellTriggerPrimitiveFilter", &o_Flag_EcalDeadCellTriggerPrimitiveFilter, "_Flag_EcalDeadCellTriggerPrimitiveFilter/O");
    tree->Branch("_Flag_BadPFMuonFilter", &o_Flag_BadPFMuonFilter, "_Flag_BadPFMuonFilter/O");
    tree->Branch("_Flag_BadChargedCandidateFilter", &o_Flag_BadChargedCandidateFilter, "_Flag_BadChargedCandidateFilter/O");
    tree->Branch("_Flag_globalSuperTightHalo2016Filter", &o_Flag_globalSuperTightHalo2016Filter, "_Flag_globalSuperTightHalo2016Filter/O");
    //tree->Branch("_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL", &o_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL, "_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL/O");
    //tree->Branch("_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_prescale", &o_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_prescale, "_HLT_Ele16_Ele12_Ele8_CaloIdL_TrackIdL_prescale/I");
    //tree->Branch("_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ", &o_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ, "_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ/O");
    //tree->Branch("_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &o_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale, "_HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale/I");
    //tree->Branch("_HLT_Mu8_DiEle12_CaloIdL_TrackIdL", &o_HLT_Mu8_DiEle12_CaloIdL_TrackIdL, "_HLT_Mu8_DiEle12_CaloIdL_TrackIdL/O");
    //tree->Branch("_HLT_Mu8_DiEle12_CaloIdL_TrackIdL_prescale", &o_HLT_Mu8_DiEle12_CaloIdL_TrackIdL_prescale, "_HLT_Mu8_DiEle12_CaloIdL_TrackIdL_prescale/I");
    //tree->Branch("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ", &o_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ, "_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ/O");
    //tree->Branch("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &o_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_prescale, "_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_prescale/I");
    //tree->Branch("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL", &o_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL, "_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL/O");
    //tree->Branch("_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_prescale", &o_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_prescale, "_HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_prescale/I");
    //tree->Branch("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ", &o_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ, "_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ/O");
    //tree->Branch("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &o_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_prescale, "_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_prescale/I");
    //tree->Branch("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL", &o_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL, "_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL/O");
    //tree->Branch("_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_prescale", &o_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_prescale, "_HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_prescale/I");
    //tree->Branch("_HLT_DiMu9_Ele9_CaloIdL_TrackIdL", &o_HLT_DiMu9_Ele9_CaloIdL_TrackIdL, "_HLT_DiMu9_Ele9_CaloIdL_TrackIdL/O");
    //tree->Branch("_HLT_DiMu9_Ele9_CaloIdL_TrackIdL_prescale", &o_HLT_DiMu9_Ele9_CaloIdL_TrackIdL_prescale, "_HLT_DiMu9_Ele9_CaloIdL_TrackIdL_prescale/I");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ", &o_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ, "_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ/O");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_prescale", &o_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_prescale, "_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_prescale/I");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ", &o_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ, "_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ/O");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale", &o_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale, "_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale/I");
    //tree->Branch("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ", &o_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ, "_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ/O");
    //tree->Branch("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale", &o_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale, "_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_prescale/I");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL", &o_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL, "_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL/O");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_prescale", &o_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_prescale, "_HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_prescale/I");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL", &o_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL, "_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL/O");
    //tree->Branch("_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale", &o_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale, "_HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale/I");
    //tree->Branch("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL", &o_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL, "_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL/O");
    //tree->Branch("_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale", &o_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale, "_HLT_TkMu17_TrkIsoVVL_TkMu8_TrkIsoVVL_prescale/I");
    //tree->Branch("_HLT_TripleMu_12_10_5", &o_HLT_TripleMu_12_10_5, "_HLT_TripleMu_12_10_5/O");
    //tree->Branch("_HLT_TripleMu_12_10_5_prescale", &o_HLT_TripleMu_12_10_5_prescale, "_HLT_TripleMu_12_10_5_prescale/I");
    //tree->Branch("_passMETFilters", &o_passMETFilters, "_passMETFilters/O");
    //tree->Branch("_Flag_HBHENoiseFilter", &o_Flag_HBHENoiseFilter, "_Flag_HBHENoiseFilter/O");
    //tree->Branch("_Flag_HBHENoiseIsoFilter", &o_Flag_HBHENoiseIsoFilter, "_Flag_HBHENoiseIsoFilter/O");
    //tree->Branch("_Flag_EcalDeadCellTriggerPrimitiveFilter", &o_Flag_EcalDeadCellTriggerPrimitiveFilter, "_Flag_EcalDeadCellTriggerPrimitiveFilter/O");
    //tree->Branch("_Flag_goodVertices", &o_Flag_goodVertices, "_Flag_goodVertices/O");
    //tree->Branch("_Flag_globalTightHalo2016Filter", &o_Flag_globalTightHalo2016Filter, "_Flag_globalTightHalo2016Filter/O");
    //tree->Branch("_Flag_BadPFMuonFilter", &o_Flag_BadPFMuonFilter, "_Flag_BadPFMuonFilter/O");
    //tree->Branch("_Flag_BadChargedCandidateFilter", &o_Flag_BadChargedCandidateFilter, "_Flag_BadChargedCandidateFilter/O");
    //tree->Branch("_HLT_Ele105_CaloIdVT_GsfTrkIdT", &o_HLT_Ele105_CaloIdVT_GsfTrkIdT, "_HLT_Ele105_CaloIdVT_GsfTrkIdT/O");
    //tree->Branch("_HLT_Ele105_CaloIdVT_GsfTrkIdT_prescale", &o_HLT_Ele105_CaloIdVT_GsfTrkIdT_prescale, "_HLT_Ele105_CaloIdVT_GsfTrkIdT_prescale/I");
    //tree->Branch("_HLT_Ele115_CaloIdVT_GsfTrkIdT", &o_HLT_Ele115_CaloIdVT_GsfTrkIdT, "_HLT_Ele115_CaloIdVT_GsfTrkIdT/O");
    //tree->Branch("_HLT_Ele115_CaloIdVT_GsfTrkIdT_prescale", &o_HLT_Ele115_CaloIdVT_GsfTrkIdT_prescale, "_HLT_Ele115_CaloIdVT_GsfTrkIdT_prescale/I");
    //tree->Branch("_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ", &o_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ, "_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ/O");
    //tree->Branch("_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale", &o_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale, "_HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_prescale/I");
    //tree->Branch("_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL", &o_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL, "_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL/O");
    //tree->Branch("_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_prescale", &o_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_prescale, "_HLT_DoubleEle33_CaloIdL_GsfTrkIdVL_prescale/I");
    //tree->Branch("_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL", &o_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL, "_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL/O");
    //tree->Branch("_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_prescale", &o_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_prescale, "_HLT_Mu30_Ele30_CaloIdL_GsfTrkIdVL_prescale/I");
    //tree->Branch("_HLT_Mu50", &o_HLT_Mu50, "_HLT_Mu50/O");
    //tree->Branch("_HLT_Mu50_prescale", &o_HLT_Mu50_prescale, "_HLT_Mu50_prescale/I");
    //tree->Branch("_HLT_TkMu50", &o_HLT_TkMu50, "_HLT_TkMu50/O");
    //tree->Branch("_HLT_TkMu50_prescale", &o_HLT_TkMu50_prescale, "_HLT_TkMu50_prescale/I");
    //tree->Branch("_HLT_Mu45_eta2p1", &o_HLT_Mu45_eta2p1, "_HLT_Mu45_eta2p1/O");
    //tree->Branch("_HLT_Mu45_eta2p1_prescale", &o_HLT_Mu45_eta2p1_prescale, "_HLT_Mu45_eta2p1_prescale/I");
    //tree->Branch("_HLT_Mu30_TkMu11", &o_HLT_Mu30_TkMu11, "_HLT_Mu30_TkMu11/O");
    //tree->Branch("_HLT_Mu30_TkMu11_prescale", &o_HLT_Mu30_TkMu11_prescale, "_HLT_Mu30_TkMu11_prescale/I");

    tree->Branch("_nL",                                 &o_nL,                                   "_nL/i");
    tree->Branch("_nMu",                                &o_nMu,                                  "_nMu/i");
    tree->Branch("_nEle",                               &o_nEle,                                 "_nEle/i");
    tree->Branch("_nLight",                             &o_nLight,                               "_nLight/i");
    tree->Branch("_nTau",                               &o_nTau,                                 "_nTau/i");
    tree->Branch("_lPt",                                &o_lPt,                                  "_lPt[_nL]/D");
    tree->Branch("_lEta",                               &o_lEta,                                 "_lEta[_nL]/D");
    tree->Branch("_lEtaSC",                             &o_lEtaSC,                               "_lEtaSC[_nLight]/D");
    tree->Branch("_lPhi",                               &o_lPhi,                                 "_lPhi[_nL]/D");
    tree->Branch("_lE",                                 &o_lE,                                   "_lE[_nL]/D");
    tree->Branch("_lFlavor",                            &o_lFlavor,                              "_lFlavor[_nL]/i");
    tree->Branch("_lCharge",                            &o_lCharge,                              "_lCharge[_nL]/I");
    tree->Branch("_dxy",                                &o_dxy,                                  "_dxy[_nL]/D");
    tree->Branch("_dz",                                 &o_dz,                                   "_dz[_nL]/D");
    tree->Branch("_3dIP",                               &o_3dIP,                                 "_3dIP[_nL]/D");
    tree->Branch("_3dIPSig",                            &o_3dIPSig,                              "_3dIPSig[_nL]/D");
    tree->Branch("_lElectronSummer16MvaGP",             &o_lElectronSummer16MvaGP,               "_lElectronSummer16MvaGP[_nLight]/F");
    tree->Branch("_lElectronSummer16MvaHZZ",            &o_lElectronSummer16MvaHZZ,              "_lElectronSummer16MvaHZZ[_nLight]/F");
    tree->Branch("_lElectronMvaFall17v1NoIso",          &o_lElectronMvaFall17v1NoIso,            "_lElectronMvaFall17v1NoIso[_nLight]/F");
    tree->Branch("_lElectronMvaFall17Iso",              &o_lElectronMvaFall17Iso,                "_lElectronMvaFall17Iso[_nLight]/F");
    tree->Branch("_lElectronMvaFall17NoIso",            &o_lElectronMvaFall17NoIso,              "_lElectronMvaFall17NoIso[_nLight]/F");
    tree->Branch("_lElectronPassEmu",                   &o_lElectronPassEmu,                     "_lElectronPassEmu[_nLight]/O");
    tree->Branch("_lElectronPassConvVeto",              &o_lElectronPassConvVeto,                "_lElectronPassConvVeto[_nLight]/O");
    tree->Branch("_lElectronChargeConst",               &o_lElectronChargeConst,                 "_lElectronChargeConst[_nLight]/O");
    tree->Branch("_lElectronMissingHits",               &o_lElectronMissingHits,                 "_lElectronMissingHits[_nLight]/i");
    tree->Branch("_lElectronIsEB",                      &o_lElectronIsEB,                        "_lElectronIsEB[_nLight]/O");
    tree->Branch("_lElectronIsEE",                      &o_lElectronIsEE,                        "_lElectronIsEE[_nLight]/O");
    tree->Branch("_lElectronSuperClusterOverP",         &o_lElectronSuperClusterOverP,           "_lElectronSuperClusterOverP[_nLight]/D");
    tree->Branch("_lElectronEcalEnergy",                &o_lElectronEcalEnergy,                  "_lElectronEcalEnergy[_nLight]/D");
    tree->Branch("_lElectronSigmaIetaIeta",             &o_lElectronSigmaIetaIeta,               "_lElectronSigmaIetaIeta[_nLight]/D");
    tree->Branch("_lElectronDEtaInSeed",                &o_lElectronDEtaInSeed,                  "_lElectronDEtaInSeed[_nLight]/D");
    tree->Branch("_lElectronDeltaPhiSuperClusterTrack", &o_lElectronDeltaPhiSuperClusterTrack,   "_lElectronDeltaPhiSuperClusterTrack[_nLight]/D");
    tree->Branch("_lElectronDeltaEtaSuperClusterTrack", &o_lElectronDeltaEtaSuperClusterTrack,   "_lElectronDeltaEtaSuperClusterTrack[_nLight]/D");
    tree->Branch("_lElectronHOverE",                    &o_lElectronHOverE,                      "_lElectronHOverE[_nLight]/D");
    tree->Branch("_lElectronEInvMinusPInv",             &o_lElectronEInvMinusPInv,               "_lElectronEInvMinusPInv[_nLight]/D");
    tree->Branch("_lElectronNumberInnerHitsMissing",    &o_lElectronNumberInnerHitsMissing,      "_lElectronNumberInnerHitsMissing[_nLight]/D");
    //tree->Branch("_leptonMvaSUSY",                      &o_leptonMvaSUSY,                        "_leptonMvaSUSY[_nLight]/D");
    tree->Branch("_leptonMvaTTH",                       &o_leptonMvaTTH,                         "_leptonMvaTTH[_nLight]/D");
    tree->Branch("_leptonMvatZq",                       &o_leptonMvatZq,                         "_leptonMvatZq[_nLight]/D");
    tree->Branch("_leptonMvaTOP",                       &o_leptonMvaTOP,                         "_leptonMvaTOP[_nLight]/D");
    tree->Branch("_lPOGVeto",                           &o_lPOGVeto,                             "_lPOGVeto[_nL]/O");
    tree->Branch("_lPOGLoose",                          &o_lPOGLoose,                            "_lPOGLoose[_nL]/O");
    tree->Branch("_lPOGMedium",                         &o_lPOGMedium,                           "_lPOGMedium[_nL]/O");
    tree->Branch("_lPOGTight",                          &o_lPOGTight,                            "_lPOGTight[_nL]/O");
    tree->Branch("_tauMuonVetoLoose",                   &o_tauMuonVetoLoose,                     "_tauMuonVetoLoose[_nL]/O");
    tree->Branch("_tauEleVetoLoose",                    &o_tauEleVetoLoose,                      "_tauEleVetoLoose[_nL]/O");
    tree->Branch("_decayModeFinding",                   &o_decayModeFinding,                     "_decayModeFinding[_nL]/O");
    tree->Branch("_tauAgainstElectronMVA6Raw",          &o_tauAgainstElectronMVA6Raw,            "_tauAgainstElectronMVA6Raw[_nL]/D");
    tree->Branch("_tauCombinedIsoDBRaw3Hits",           &o_tauCombinedIsoDBRaw3Hits,             "_tauCombinedIsoDBRaw3Hits[_nL]/D");
    tree->Branch("_tauIsoMVAPWdR03oldDMwLT",            &o_tauIsoMVAPWdR03oldDMwLT,              "_tauIsoMVAPWdR03oldDMwLT[_nL]/D");
    tree->Branch("_tauIsoMVADBdR03oldDMwLT",            &o_tauIsoMVADBdR03oldDMwLT,              "_tauIsoMVADBdR03oldDMwLT[_nL]/D");
    tree->Branch("_tauIsoMVADBdR03newDMwLT",            &o_tauIsoMVADBdR03newDMwLT,              "_tauIsoMVADBdR03newDMwLT[_nL]/D");
    tree->Branch("_tauIsoMVAPWnewDMwLT",                &o_tauIsoMVAPWnewDMwLT,                  "_tauIsoMVAPWnewDMwLT[_nL]/D");
    tree->Branch("_tauIsoMVAPWoldDMwLT",                &o_tauIsoMVAPWoldDMwLT,                  "_tauIsoMVAPWoldDMwLT[_nL]/D");
    tree->Branch("_relIso",                             &o_relIso,                               "_relIso[_nLight]/D");
    tree->Branch("_relIso0p4",                          &o_relIso0p4,                            "_relIso0p4[_nLight]/D");
    tree->Branch("_relIso0p4MuDeltaBeta",               &o_relIso0p4MuDeltaBeta,                 "_relIso0p4MuDeltaBeta[_nMu]/D");
    tree->Branch("_miniIso",                            &o_miniIso,                              "_miniIso[_nLight]/D");
    tree->Branch("_miniIsoCharged",                     &o_miniIsoCharged,                       "_miniIsoCharged[_nLight]/D");
    tree->Branch("_ptRel",                              &o_ptRel,                                "_ptRel[_nLight]/D");
    tree->Branch("_ptRatio",                            &o_ptRatio,                              "_ptRatio[_nLight]/D");
    tree->Branch("_closestJetCsvV2",                    &o_closestJetCsvV2,                      "_closestJetCsvV2[_nLight]/D");
    tree->Branch("_closestJetDeepCsv_b",                &o_closestJetDeepCsv_b,                  "_closestJetDeepCsv_b[_nLight]/D");
    tree->Branch("_closestJetDeepCsv_bb",               &o_closestJetDeepCsv_bb,                 "_closestJetDeepCsv_bb[_nLight]/D");
    tree->Branch("_closestJetDeepCsv",                  &o_closestJetDeepCsv,                    "_closestJetDeepCsv[_nLight]/D");
    tree->Branch("_closestJetDeepFlavor_b",                  &o_closestJetDeepFlavor_b,                    "_closestJetDeepFlavor_b[_nLight]/D");
    tree->Branch("_closestJetDeepFlavor_bb",                  &o_closestJetDeepFlavor_bb,                    "_closestJetDeepFlavor_bb[_nLight]/D");
    tree->Branch("_closestJetDeepFlavor_lepb",                  &o_closestJetDeepFlavor_lepb,                    "_closestJetDeepFlavor_lepb[_nLight]/D");
    tree->Branch("_closestJetDeepFlavor",                  &o_closestJetDeepFlavor,                    "_closestJetDeepFlavor[_nLight]/D");
    tree->Branch("_selectedTrackMult",                  &o_selectedTrackMult,                    "_selectedTrackMult[_nLight]/i");
    //tree->Branch("_lKVF_valid",			              &o_lKVF_valid,			                "_lKVF_valid[_nLight]/O");
    //tree->Branch("_lKVF_x",			                  &o_lKVF_x,			                    "_lKVF_x[_nLight]/D");
    //tree->Branch("_lKVF_y",			                  &o_lKVF_y,			                    "_lKVF_y[_nLight]/D");
    //tree->Branch("_lKVF_z",			                  &o_lKVF_z,			                    "_lKVF_z[_nLight]/D");
    //tree->Branch("_lKVF_cxx",			                  &o_lKVF_cxx,			                    "_lKVF_cxx[_nLight]/D");
    //tree->Branch("_lKVF_cyy",			                  &o_lKVF_cyy,			                    "_lKVF_cyy[_nLight]/D");
    //tree->Branch("_lKVF_czz",			                  &o_lKVF_czz,			                    "_lKVF_czz[_nLight]/D");
    //tree->Branch("_lKVF_cyx",			                  &o_lKVF_cyx,			                    "_lKVF_cyx[_nLight]/D");
    //tree->Branch("_lKVF_czy",			                  &o_lKVF_czy,			                    "_lKVF_czy[_nLight]/D");
    //tree->Branch("_lKVF_czx",			                  &o_lKVF_czx,			                    "_lKVF_czx[_nLight]/D");
    //tree->Branch("_lKVF_df",			                  &o_lKVF_df,			                    "_lKVF_df[_nLight]/D");
    //tree->Branch("_lKVF_chi2",			              &o_lKVF_chi2,			                "_lKVF_chi2[_nLight]/D");
    //tree->Branch("_lKVF_ntracks",		                  &o_lKVF_ntracks,		                    "_lKVF_ntracks[_nLight]/i");
    //tree->Branch("_lKVF_dRcut",                         &o_lKVF_dRcut,                           "_lKVF_dRcut[_nLight]/D");
    //tree->Branch("_lKVF_trackPt",                       &o_lKVF_trackPt,                         "_lKVF_trackPt[_nLight][15]/D");
    //tree->Branch("_lKVF_trackEta",                      &o_lKVF_trackEta,                        "_lKVF_trackEta[_nLight][15]/D");
    //tree->Branch("_lKVF_trackPhi",                      &o_lKVF_trackPhi,                        "_lKVF_trackPhi[_nLight][15]/D");
    //tree->Branch("_lKVF_trackE",                        &o_lKVF_trackE,                          "_lKVF_trackE[_nLight][15]/D");
    //tree->Branch("_lKVF_trackdR",                       &o_lKVF_trackdR,                         "_lKVF_trackdR[_nLight][15]/D");
    //tree->Branch("_lKVF_trackdxy",                      &o_lKVF_trackdxy,                        "_lKVF_trackdxy[_nLight][15]/D");
    //tree->Branch("_lKVF_trackdz",                       &o_lKVF_trackdz,                         "_lKVF_trackdz[_nLight][15]/D");
    //tree->Branch("_IVF_nvertex",                        &o_IVF_nvertex,                          "_IVF_nvertex/i");
    tree->Branch("_IVF_x",                              &o_IVF_x,                                "_IVF_x[_nLight]/D");
    tree->Branch("_IVF_y",                              &o_IVF_y,                                "_IVF_y[_nLight]/D");
    tree->Branch("_IVF_z",                              &o_IVF_z,                                "_IVF_z[_nLight]/D");
    tree->Branch("_IVF_cx",                             &o_IVF_cx,                               "_IVF_cx[_nLight]/D");
    tree->Branch("_IVF_cy",                             &o_IVF_cy,                               "_IVF_cy[_nLight]/D");
    tree->Branch("_IVF_cz",                             &o_IVF_cz,                               "_IVF_cz[_nLight]/D");
    tree->Branch("_IVF_df",                             &o_IVF_df,                               "_IVF_df[_nLight]/D");
    tree->Branch("_IVF_chi2",                           &o_IVF_chi2,                             "_IVF_chi2[_nLight]/D");
    tree->Branch("_IVF_pt",                             &o_IVF_pt,                               "_IVF_pt[_nLight]/D");
    tree->Branch("_IVF_eta",                            &o_IVF_eta,                              "_IVF_eta[_nLight]/D");
    tree->Branch("_IVF_phi",                            &o_IVF_phi,                              "_IVF_phi[_nLight]/D");
    tree->Branch("_IVF_E",                              &o_IVF_E,                                "_IVF_E[_nLight]/D");
    tree->Branch("_IVF_mass",                           &o_IVF_mass,                             "_IVF_mass[_nLight]/D");
    tree->Branch("_IVF_ntracks",                        &o_IVF_ntracks,                          "_IVF_ntracks[_nLight]/i");
    tree->Branch("_IVF_trackpt",                        &o_IVF_trackpt,                          "_IVF_trackpt[_nLight][15]/D");
    tree->Branch("_IVF_tracketa",                       &o_IVF_tracketa,                         "_IVF_tracketa[_nLight][15]/D");
    tree->Branch("_IVF_trackphi",                       &o_IVF_trackphi,                         "_IVF_trackphi[_nLight][15]/D");
    tree->Branch("_IVF_trackE",                         &o_IVF_trackE,                           "_IVF_trackE[_nLight][15]/D");
    //tree->Branch("_IVF_trackdxy",                       &o_IVF_trackdxy,                         "_IVF_trackdxy[_nLight][15]/D");
    //tree->Branch("_IVF_trackdz",                        &o_IVF_trackdz,                          "_IVF_trackdz[_nLight][15]/D");
    tree->Branch("_IVF_trackcharge",                    &o_IVF_trackcharge,                      "_IVF_trackcharge[_nLight][15]/D");
    tree->Branch("_lIVF_match",                         &o_lIVF_match,                           "_lIVF_match[_nLight]/O");
    tree->Branch("_lGlobalMuon",                        &o_lGlobalMuon,                          "_lGlobalMuon[_nMu]/O");
    tree->Branch("_lTrackerMuon",                       &o_lTrackerMuon,                         "_lTrackerMuon[_nMu]/O");
    tree->Branch("_lInnerTrackValidFraction",           &o_lInnerTrackValidFraction,             "_lInnerTrackValidFraction[_nMu]/D");
    tree->Branch("_lGlobalTrackNormalizedChi2",         &o_lGlobalTrackNormalizedChi2,           "_lGlobalTrackNormalizedChi2[_nMu]/D");
    tree->Branch("_lCQChi2Position",                    &o_lCQChi2Position,                      "_lCQChi2Position[_nMu]/D");
    tree->Branch("_lCQTrackKink",                       &o_lCQTrackKink,                         "_lCQTrackKink[_nMu]/D");
    tree->Branch("_lNumberOfMatchedStation",            &o_lNumberOfMatchedStation,              "_lNumberOfMatchedStation[_nMu]/i");
    tree->Branch("_lNumberOfValidPixelHits",            &o_lNumberOfValidPixelHits,              "_lNumberOfValidPixelHits[_nMu]/i");
    tree->Branch("_lNumberOfValidTrackerHits",            &o_lNumberOfValidTrackerHits,              "_lNumberOfValidTrackerHits[_nMu]/i");
    tree->Branch("_muNumberInnerHits",                  &o_muNumberInnerHits,                    "_muNumberInnerHits[_nMu]/i");
    tree->Branch("_lTrackerLayersWithMeasurement",      &o_lTrackerLayersWithMeasurement,        "_lTrackerLayersWithMeasurement[_nMu]/i");
    tree->Branch("_lMuonSegComp",                       &o_lMuonSegComp,                         "_lMuonSegComp[_nMu]/D");
    tree->Branch("_lMuonTrackPt",                       &o_lMuonTrackPt,                         "_lMuonTrackPt[_nMu]/D");
    tree->Branch("_lMuonTrackPtErr",                    &o_lMuonTrackPtErr,                      "_lMuonTrackPtErr[_nMu]/D");
    tree->Branch("_lMuonTimenDof",                      &o_lMuonTimenDof,                "_lMuonTimenDof[_nMu]/I");
    tree->Branch("_lMuonTime",                          &o_lMuonTime,                    "_lMuonTime[_nMu]/D");
    tree->Branch("_lMuonTimeErr",                       &o_lMuonTimeErr,                 "_lMuonTimeErr[_nMu]/D");
    tree->Branch("_lMuonRPCTimenDof",                   &o_lMuonRPCTimenDof,             "_lMuonRPCTimenDof[_nMu]/I");
    tree->Branch("_lMuonRPCTime",                       &o_lMuonRPCTime,                 "_lMuonRPCTime[_nMu]/D");
    tree->Branch("_lMuonRPCTimeErr",                    &o_lMuonRPCTimeErr,              "_lMuonRPCTimeErr[_nMu]/D");
    if( !isData ){
        tree->Branch("_lIsPrompt",                        &o_lIsPrompt,                            "_lIsPrompt[_nL]/O");
        tree->Branch("_lMatchPdgId",                      &o_lMatchPdgId,                          "_lMatchPdgId[_nL]/I");
        tree->Branch("_lMatchCharge",                     &o_lMatchCharge,                         "_lMatchCharge[_nL]/I");
        tree->Branch("_tauGenStatus",                     &o_tauGenStatus,                         "_tauGenStatus[_nL]/i");
        tree->Branch("_lMomPdgId",                        &o_lMomPdgId,                            "_lMomPdgId[_nL]/I");
        tree->Branch("_lProvenance",                      &o_lProvenance,                          "_lProvenance[_nL]/i");
        tree->Branch("_lProvenanceCompressed",            &o_lProvenanceCompressed,                "_lProvenanceCompressed[_nL]/i");
        tree->Branch("_lProvenanceConversion",            &o_lProvenanceConversion,                "_lProvenanceConversion[_nL]/i");
    }
    tree->Branch("_lPtCorr",                            &o_lPtCorr,                              "_lPtCorr[_nLight]/D");
    tree->Branch("_lPtScaleUp",                         &o_lPtScaleUp,                           "_lPtScaleUp[_nLight]/D");
    tree->Branch("_lPtScaleDown",                       &o_lPtScaleDown,                         "_lPtScaleDown[_nLight]/D");
    tree->Branch("_lPtResUp",                           &o_lPtResUp,                             "_lPtResUp[_nLight]/D");
    tree->Branch("_lPtResDown",                         &o_lPtResDown,                           "_lPtResDown[_nLight]/D");
    //tree->Branch("_lECorr",                             &o_lECorr,                               "_lECorr[_nLight]/D");
    //tree->Branch("_lEScaleUp",                          &o_lEScaleUp,                            "_lEScaleUp[_nLight]/D");
    //tree->Branch("_lEScaleDown",                        &o_lEScaleDown,                          "_lEScaleDown[_nLight]/D");
    //tree->Branch("_lEResUp",                            &o_lEResUp,                              "_lEResUp[_nLight]/D");
    //tree->Branch("_lEResDown",                          &o_lEResDown,                            "_lEResDown[_nLight]/D");

    tree->Branch("_nJets",                              &o_nJets,                                "_nJets/i");
    tree->Branch("_jetPt",                              &o_jetPt,                                "_jetPt[_nJets]/D");
    tree->Branch("_jetPt_JECDown",                      &o_jetPt_JECDown,                        "_jetPt_JECDown[_nJets]/D");
    tree->Branch("_jetPt_JECUp",                        &o_jetPt_JECUp,                          "_jetPt_JECUp[_nJets]/D");
    tree->Branch("_jetSmearedPt",                       &o_jetSmearedPt,                         "_jetSmearedPt[_nJets]/D");
    tree->Branch("_jetSmearedPt_JECDown",               &o_jetSmearedPt_JECDown,                 "_jetSmearedPt_JECDown[_nJets]/D");
    tree->Branch("_jetSmearedPt_JECUp",                 &o_jetSmearedPt_JECUp,                   "_jetSmearedPt_JECUp[_nJets]/D");
    tree->Branch("_jetSmearedPt_JERDown",               &o_jetSmearedPt_JERDown,                 "_jetSmearedPt_JERDown[_nJets]/D");
    tree->Branch("_jetSmearedPt_JERUp",                 &o_jetSmearedPt_JERUp,                   "_jetSmearedPt_JERUp[_nJets]/D");
    tree->Branch("_jetPt_Uncorrected",                  &o_jetPt_Uncorrected,                    "_jetPt_Uncorrected[_nJets]/D");
    tree->Branch("_jetPt_L1",                           &o_jetPt_L1,                             "_jetPt_L1[_nJets]/D");
    tree->Branch("_jetPt_L2",                           &o_jetPt_L2,                             "_jetPt_L2[_nJets]/D");
    tree->Branch("_jetPt_L3",                           &o_jetPt_L3,                             "_jetPt_L3[_nJets]/D");

    tree->Branch("_jetEta",                             &o_jetEta,                               "_jetEta[_nJets]/D");
    tree->Branch("_jetPhi",                             &o_jetPhi,                               "_jetPhi[_nJets]/D");
    tree->Branch("_jetE",                               &o_jetE,                                 "_jetE[_nJets]/D");
    tree->Branch("_jetCsvV2",                           &o_jetCsvV2,                             "_jetCsvV2[_nJets]/D");
    tree->Branch("_jetDeepCsv_udsg",                    &o_jetDeepCsv_udsg,                      "_jetDeepCsv_udsg[_nJets]/D");
    tree->Branch("_jetDeepCsv_b",                       &o_jetDeepCsv_b,                         "_jetDeepCsv_b[_nJets]/D");
    tree->Branch("_jetDeepCsv_c",                       &o_jetDeepCsv_c,                         "_jetDeepCsv_c[_nJets]/D");
    tree->Branch("_jetDeepCsv_bb",                      &o_jetDeepCsv_bb,                        "_jetDeepCsv_bb[_nJets]/D");
    tree->Branch("_jetDeepCsv",                         &o_jetDeepCsv,                           "_jetDeepCsv[_nJets]/D");
    tree->Branch("_jetDeepFlavor_b",                         &o_jetDeepFlavor_b,                           "_jetDeepFlavor_b[_nJets]/D");
    tree->Branch("_jetDeepFlavor_bb",                         &o_jetDeepFlavor_bb,                           "_jetDeepFlavor_bb[_nJets]/D");
    tree->Branch("_jetDeepFlavor_lepb",                         &o_jetDeepFlavor_lepb,                           "_jetDeepFlavor_lepb[_nJets]/D");
    tree->Branch("_jetDeepFlavor",                         &o_jetDeepFlavor,                           "_jetDeepFlavor[_nJets]/D");
    tree->Branch("_jetDeepFlavor_c",                         &o_jetDeepFlavor_c,                           "_jetDeepFlavor_c[_nJets]/D");
    tree->Branch("_jetDeepFlavor_uds",                         &o_jetDeepFlavor_uds,                           "_jetDeepFlavor_uds[_nJets]/D");
    tree->Branch("_jetDeepFlavor_g",                         &o_jetDeepFlavor_g,                           "_jetDeepFlavor_g[_nJets]/D");
    tree->Branch("_jetHadronFlavor",                    &o_jetHadronFlavor,                      "_jetHadronFlavor[_nJets]/i");
    tree->Branch("_jetIsTight",                         &o_jetIsTight,                           "_jetIsTight[_nJets]/O");
    tree->Branch("_jetIsTightLepVeto",                  &o_jetIsTightLepVeto,                    "_jetIsTightLepVeto[_nJets]/O");

    tree->Branch("_jetNeutralHadronFraction",           &o_jetNeutralHadronFraction,             "_jetNeutralHadronFraction[_nJets]/D");
    tree->Branch("_jetChargedHadronFraction",           &o_jetChargedHadronFraction,             "_jetChargedHadronFraction[_nJets]/D");
    tree->Branch("_jetNeutralEmFraction",               &o_jetNeutralEmFraction,                 "_jetNeutralEmFraction[_nJets]/D");
    tree->Branch("_jetChargedEmFraction",               &o_jetChargedEmFraction,                 "_jetChargedEmFraction[_nJets]/D");
    tree->Branch("_jetHFHadronFraction",                &o_jetHFHadronFraction,                  "_jetHFHadronFraction[_nJets]/D");
    tree->Branch("_jetHFEmFraction",                    &o_jetHFEmFraction,                      "_jetHFEmFraction[_nJets]/D");

    tree->Branch("_met",                                &o_met,                                  "_met/D");
    tree->Branch("_metRaw",                             &o_metRaw,                               "_metRaw/D");
    tree->Branch("_metJECDown",                         &o_metJECDown,                           "_metJECDown/D");
    tree->Branch("_metJECUp",                           &o_metJECUp,                             "_metJECUp/D");
    tree->Branch("_metUnclDown",                        &o_metUnclDown,                          "_metUnclDown/D");
    tree->Branch("_metUnclUp",                          &o_metUnclUp,                            "_metUnclUp/D");

    tree->Branch("_metPhi",                             &o_metPhi,                               "_metPhi/D");
    tree->Branch("_metRawPhi",                          &o_metRawPhi,                            "_metRawPhi/D");
    tree->Branch("_metPhiJECDown",                      &o_metPhiJECDown,                        "_metPhiJECDown/D");
    tree->Branch("_metPhiJECUp",                        &o_metPhiJECUp,                          "_metPhiJECUp/D");
    tree->Branch("_metPhiUnclDown",                     &o_metPhiUnclDown,                       "_metPhiUnclDown/D");
    tree->Branch("_metPhiUnclUp",                       &o_metPhiUnclUp,                         "_metPhiUnclUp/D");
    tree->Branch("_metSignificance",                    &o_metSignificance,                      "_metSignificance/D");

    // variables for Particle Flow HNL Jet tagger MVA based on deep sets theorem
    tree->Branch("_nJetConstituents",                   &o_nJetConstituents,                     "_nJetConstituents[_nJets]/i");
    std::string jetConstituentsArraySize = "[_nJets][50]";
    tree->Branch( "_JetConstituentPt",                  &o_JetConstituentPt,                     std::string("_JetConstituentPt" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentEta",                 &o_JetConstituentEta,                    std::string("_JetConstituentEta" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentPhi",                 &o_JetConstituentPhi,                    std::string("_JetConstituentPhi" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentMass",                &o_JetConstituentMass,                   std::string("_JetConstituentMass" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentPdgId",               &o_JetConstituentPdgId,                  std::string("_JetConstituentPdgId" + jetConstituentsArraySize + "/I").c_str() );
    tree->Branch( "_JetConstituentPdgIdReduced",        &o_JetConstituentPdgIdReduced,           std::string("_JetConstituentPdgIdReduced" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentCharge",              &o_JetConstituentCharge,                 std::string("_JetConstituentCharge" + jetConstituentsArraySize + "/I").c_str() );
    tree->Branch( "_JetConstituentdxy",                 &o_JetConstituentdxy,                    std::string("_JetConstituentdxy" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentdz",                  &o_JetConstituentdz,                     std::string("_JetConstituentdz" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentdxyErr",              &o_JetConstituentdxyErr,                 std::string("_JetConstituentdxyErr" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentdzErr",               &o_JetConstituentdzErr,                  std::string("_JetConstituentdzErr" + jetConstituentsArraySize + "/D").c_str() );
    tree->Branch( "_JetConstituentNumberOfHits",        &o_JetConstituentNumberOfHits,           std::string("_JetConstituentNumberOfHits" + jetConstituentsArraySize + "/I").c_str() );
    tree->Branch( "_JetConstituentNumberOfPixelHits",   &o_JetConstituentNumberOfPixelHits,      std::string("_JetConstituentNumberOfPixelHits" + jetConstituentsArraySize + "/I").c_str() );
    tree->Branch( "_JetConstituentHasTrack",            &o_JetConstituentHasTrack,               std::string("_JetConstituentHasTrack" + jetConstituentsArraySize + "/O").c_str() );
    
    //tree->Branch("_jetIsLoose",                         &o_jetIsLoose,                           "_jetIsLoose[_nJets]/O"); // WARNING, not recommended to be used, only exists for 2016
}


Skimmer::Skimmer(TString inputfilename, TString outputfilename)
{
    input = new TFile(inputfilename, "open");
    inputtree = (TTree*)input->Get("blackJackAndHookers/blackJackAndHookersTree");
    Init_input_branches(inputtree);
    inputtree->GetEntry(0);
    TString year;
    if(i_is2017) year = "2017";
    else if(i_is2018) year = "2018";
    else year = "2016";
    isData = (inputfilename.Index("Run20") != -1);
    std::cout << "Skimming " << inputfilename << (isData? "(Data)" : "(MC)") << std::endl;

    TString blackJAH_version = "blackJackAndHookers";
    if(input->GetListOfKeys()->Contains("blackJackAndHookersGlobal")){
        std::cout << "Getting hCounter etc. from blackJackAndHookersGlobal directory" << std::endl;
        blackJAH_version = "blackJackAndHookersGlobal";
    }else std::cout << "Getting hCounter etc. from blackJackAndHookers directory" << std::endl;
    std::shared_ptr< TH1D > nVertices( (TH1D*) input->Get( blackJAH_version + "/nVertices" ) );
    std::shared_ptr< TH1D > hCounter;
    std::shared_ptr< TH1D > lheCounter;
    std::shared_ptr< TH1D > nTrueInteractions;
    std::shared_ptr< TH1D> psCounter;
    if( !isData ){
        hCounter = std::shared_ptr< TH1D >( (TH1D*) input->Get( blackJAH_version + "/hCounter" ) );
        lheCounter = std::shared_ptr< TH1D >( (TH1D*) input->Get( blackJAH_version + "/lheCounter" ) );
        nTrueInteractions = std::shared_ptr< TH1D >( (TH1D*) input->Get( blackJAH_version + "/nTrueInteractions" ) );
        psCounter = std::shared_ptr< TH1D >( (TH1D*) input->Get( blackJAH_version + "/psCounter" ) );
    }

    output = new TFile(outputfilename, "recreate");
    output->mkdir("blackJackAndHookersGlobal");
    output->cd("blackJackAndHookersGlobal");

    nVertices->Write( "nVertices" );
    if( !isData ){
        hCounter->Write( "hCounter" );
        lheCounter->Write( "lheCounter" );
        nTrueInteractions->Write( "nTrueInteractions" );
        psCounter->Write( "psCounter" );
    }

    output->mkdir("blackJackAndHookers");
    output->cd("blackJackAndHookers");
    outputtree = new TTree("blackJackAndHookersTree", "blackJackAndHookersTree");
    Add_branches(outputtree);

    if(!hasLeptonMvaTOP) mvahelper = new LeptonMvaHelper("TOP", year);
}


void Skimmer::Skim(TString skimcondition)
{
    Long64_t nentries = inputtree->GetEntries();
    unsigned notice = ceil(0.01 * nentries / 20) * 100;
    unsigned loop_counter = 0;
    for(Long64_t jentry = 0; jentry < nentries; ++jentry){
        if(loop_counter == notice){
            std::cout << jentry << " of " << nentries << std::endl;
            loop_counter = 0;
        }
        inputtree->GetEntry(jentry);

        if(Check_SkimCondition(skimcondition)){
            o_runNb = i_runNb;
            o_lumiBlock = i_lumiBlock;
            o_eventNb = i_eventNb;
            o_nVertex = i_nVertex;
            o_is2017  = i_is2017;
            o_is2018  = i_is2018;
            o_BS_x    = i_BS_x;
            o_BS_y    = i_BS_y;
            o_BS_z    = i_BS_z;
            o_BS_xErr = i_BS_xErr;
            o_BS_yErr = i_BS_yErr;
            o_BS_zErr = i_BS_zErr;
            o_PV_x    = i_PV_x;
            o_PV_y    = i_PV_y;
            o_PV_z    = i_PV_z;
            o_PV_xErr = i_PV_xErr;
            o_PV_yErr = i_PV_yErr;
            o_PV_zErr = i_PV_zErr;
            if(!isData){
                o_prefireWeight = i_prefireWeight;
                o_prefireWeightUp = i_prefireWeightUp;
                o_prefireWeightDown = i_prefireWeightDown;
                o_nTrueInt = i_nTrueInt;
                o_weight   = i_weight;
                o_lheHTIncoming = i_lheHTIncoming;
                o_ctauHN = i_ctauHN;
                o_nLheTau = i_nLheTau;
                o_nLheWeights = i_nLheWeights;
                for(unsigned i = 0; i < i_nLheWeights; i++) o_lheWeight[i] = i_lheWeight[i];
                o_nPsWeights = i_nPsWeights;
                for(unsigned i = 0; i < i_nPsWeights; i++) o_psWeight[i] = i_psWeight[i];
                o_ttgEventType = i_ttgEventType;
                o_zgEventType  = i_zgEventType;
                o_gen_met      = i_gen_met;
                o_gen_metPhi   = i_gen_metPhi;
                o_gen_nPh      = i_gen_nPh;
                for(unsigned i = 0; i < i_gen_nPh; i++){
                    o_gen_phStatus[i] = i_gen_phStatus[i];
                    o_gen_phPt[i] = i_gen_phPt[i];   
                    o_gen_phEta[i] = i_gen_phEta[i];   
                    o_gen_phPhi[i] = i_gen_phPhi[i];   
                    o_gen_phE[i] = i_gen_phE[i];   
                    o_gen_phMomPdg[i] = i_gen_phMomPdg[i];   
                    o_gen_phIsPrompt[i] = i_gen_phIsPrompt[i];   
                    o_gen_phMinDeltaR[i] = i_gen_phMinDeltaR[i];   
                    o_gen_phPassParentage[i] = i_gen_phPassParentage[i];   
                }
                o_gen_nL = i_gen_nL;
                for(unsigned i = 0; i < i_gen_nL; i++){
                    o_gen_lPt[i] = i_gen_lPt[i];   
                    o_gen_lEta[i] = i_gen_lEta[i];   
                    o_gen_lPhi[i] = i_gen_lPhi[i];   
                    o_gen_lE[i] = i_gen_lE[i];   
                    o_gen_lFlavor[i] = i_gen_lFlavor[i];   
                    o_gen_lCharge[i] = i_gen_lCharge[i];   
                    o_gen_lMomPdg[i] = i_gen_lMomPdg[i];   
                    o_gen_vertex_x[i] = i_gen_vertex_x[i];
                    o_gen_vertex_y[i] = i_gen_vertex_y[i];
                    o_gen_vertex_z[i] = i_gen_vertex_z[i];
                    o_gen_lIsPrompt[i] = i_gen_lIsPrompt[i];   
                    o_gen_lDecayedHadr[i] = i_gen_lDecayedHadr[i];
                    o_gen_lMinDeltaR[i] = i_gen_lMinDeltaR[i];   
                    o_gen_lPassParentage[i] = i_gen_lPassParentage[i];   
                }
                o_gen_nN = i_gen_nN;
                o_gen_NPt = i_gen_NPt;
                o_gen_NEta = i_gen_NEta;
                o_gen_NPhi = i_gen_NPhi;
                o_gen_NE = i_gen_NE;
                o_gen_Nvertex_x = i_gen_Nvertex_x;
                o_gen_Nvertex_y = i_gen_Nvertex_y;
                o_gen_Nvertex_z = i_gen_Nvertex_z;
                o_gen_nNPackedDtrs = i_gen_nNPackedDtrs;
                for(unsigned i = 0; i < i_gen_nNPackedDtrs; i++){
                    o_gen_NPackedDtrsPt[i] = i_gen_NPackedDtrsPt[i];
                    o_gen_NPackedDtrsEta[i] = i_gen_NPackedDtrsEta[i];
                    o_gen_NPackedDtrsPhi[i] = i_gen_NPackedDtrsPhi[i];
                    o_gen_NPackedDtrsE[i] = i_gen_NPackedDtrsE[i];
                    o_gen_NPackedDtrsPdgId[i] = i_gen_NPackedDtrsPdgId[i];
                    o_gen_NPackedDtrsCharge[i] = i_gen_NPackedDtrsCharge[i];
                }
                o_gen_nNdaughters = i_gen_nNdaughters;
                for(unsigned i = 0; i < i_gen_nNdaughters; i++){ 
                    o_gen_Ndaughters_pdg[i] = i_gen_Ndaughters_pdg[i];
                    o_gen_Ndaughters_Pt[i] = i_gen_Ndaughters_Pt[i];
                    o_gen_Ndaughters_Eta[i] = i_gen_Ndaughters_Eta[i];
                    o_gen_Ndaughters_Phi[i] = i_gen_Ndaughters_Phi[i];
                    o_gen_Ndaughters_E[i] = i_gen_Ndaughters_E[i];
                    o_gen_Ndaughters_Charge[i] = i_gen_Ndaughters_Charge[i];
                }
                o_gen_nq = i_gen_nq;
                for(unsigned i = 0; i < i_gen_nq; i++){
                    o_gen_qPt[i] = i_gen_qPt[i];   
                    o_gen_qEta[i] = i_gen_qEta[i];   
                    o_gen_qPhi[i] = i_gen_qPhi[i];   
                    o_gen_qE[i] = i_gen_qE[i];   
                }
            }
            o_HLT_Ele27_WPTight_Gsf = i_HLT_Ele27_WPTight_Gsf;
            o_HLT_Ele27_WPTight_Gsf_prescale = i_HLT_Ele27_WPTight_Gsf_prescale;
            o_HLT_Ele32_WPTight_Gsf = i_HLT_Ele32_WPTight_Gsf;
            o_HLT_Ele32_WPTight_Gsf_prescale = i_HLT_Ele32_WPTight_Gsf_prescale;
            o_HLT_IsoMu24 = i_HLT_IsoMu24;
            o_HLT_IsoMu24_prescale = i_HLT_IsoMu24_prescale;
            o_HLT_IsoTkMu24 = i_HLT_IsoTkMu24;
            o_HLT_IsoTkMu24_prescale = i_HLT_IsoTkMu24_prescale;
            o_HLT_IsoMu27 = i_HLT_IsoMu27;
            o_HLT_IsoMu27_prescale = i_HLT_IsoMu27_prescale;
            o_HLT_IsoMu24_eta2p1 = i_HLT_IsoMu24_eta2p1;
            o_HLT_IsoMu24_eta2p1_prescale = i_HLT_IsoMu24_eta2p1_prescale;
            o_HLT_MET200 = i_HLT_MET200;
            o_HLT_MET200_prescale = i_HLT_MET200_prescale;
            o_HLT_PFMET300 = i_HLT_PFMET300;
            o_HLT_PFMET300_prescale = i_HLT_PFMET300_prescale;
            o_HLT_PFMET170_HBHECleaned = i_HLT_PFMET170_HBHECleaned;
            o_HLT_PFMET170_HBHECleaned_prescale = i_HLT_PFMET170_HBHECleaned_prescale;
            o_HLT_PFMET120_PFMHT120_IDTight = i_HLT_PFMET120_PFMHT120_IDTight;
            o_HLT_PFMET120_PFMHT120_IDTight_prescale = i_HLT_PFMET120_PFMHT120_IDTight_prescale;
            o_HLT_PFMET140_PFMHT140_IDTight = i_HLT_PFMET140_PFMHT140_IDTight;
            o_HLT_PFMET140_PFMHT140_IDTight_prescale = i_HLT_PFMET140_PFMHT140_IDTight_prescale;
            o_HLT_CaloMET350_HBHECleaned = i_HLT_CaloMET350_HBHECleaned;
            o_HLT_CaloMET350_HBHECleaned_prescale = i_HLT_CaloMET350_HBHECleaned_prescale;
            o_HLT_PFMET250_HBHECleaned = i_HLT_PFMET250_HBHECleaned;
            o_HLT_PFMET250_HBHECleaned_prescale = i_HLT_PFMET250_HBHECleaned_prescale;
            o_HLT_PFMET200_HBHE_BeamHaloCleaned = i_HLT_PFMET200_HBHE_BeamHaloCleaned;
            o_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale = i_HLT_PFMET200_HBHE_BeamHaloCleaned_prescale;
            o_HLT_PFMETTypeOne140_PFMHT140_IDTight = i_HLT_PFMETTypeOne140_PFMHT140_IDTight;
            o_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale = i_HLT_PFMETTypeOne140_PFMHT140_IDTight_prescale;
            o_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned = i_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned;
            o_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale = i_HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_prescale;
            o_passMETFilters = i_passMETFilters;
            o_Flag_goodVertices = i_Flag_goodVertices;
            o_Flag_HBHENoiseFilter = i_Flag_HBHENoiseFilter;
            o_Flag_HBHENoiseIsoFilter = i_Flag_HBHENoiseIsoFilter;
            o_Flag_EcalDeadCellTriggerPrimitiveFilter = i_Flag_EcalDeadCellTriggerPrimitiveFilter;
            o_Flag_BadPFMuonFilter = i_Flag_BadPFMuonFilter;
            o_Flag_BadChargedCandidateFilter = i_Flag_BadChargedCandidateFilter;
            o_Flag_globalSuperTightHalo2016Filter = i_Flag_globalSuperTightHalo2016Filter;
            o_nL = i_nL;
            o_nMu = i_nMu;
            o_nEle = i_nEle;
            o_nLight = i_nLight;
            o_nTau = i_nTau;
            for(unsigned i = 0; i < i_nL; i++){
                o_lPt[i] = i_lPt[i];   
                o_lEta[i] = i_lEta[i];   
                o_lPhi[i] = i_lPhi[i];   
                o_lE[i] = i_lE[i];   
                o_lFlavor[i] = i_lFlavor[i];   
                o_lCharge[i] = i_lCharge[i];   
                o_dxy[i] = i_dxy[i];   
                o_dz[i] = i_dz[i];   
                o_3dIP[i] = i_3dIP[i];   
                o_3dIPSig[i] = i_3dIPSig[i];   
                o_lPOGVeto[i] = i_lPOGVeto[i];   
                o_lPOGLoose[i] = i_lPOGLoose[i];   
                o_lPOGMedium[i] = i_lPOGMedium[i];   
                o_lPOGTight[i] = i_lPOGTight[i];   
                o_tauMuonVetoLoose[i] = i_tauMuonVetoLoose[i];
                o_tauEleVetoLoose[i] = i_tauEleVetoLoose[i];
                o_decayModeFinding[i] = i_decayModeFinding[i];
                o_tauAgainstElectronMVA6Raw[i] = i_tauAgainstElectronMVA6Raw[i];
                o_tauCombinedIsoDBRaw3Hits[i] = i_tauCombinedIsoDBRaw3Hits[i];
                o_tauIsoMVAPWdR03oldDMwLT[i] = i_tauIsoMVAPWdR03oldDMwLT[i];
                o_tauIsoMVADBdR03oldDMwLT[i] = i_tauIsoMVADBdR03oldDMwLT[i];
                o_tauIsoMVADBdR03newDMwLT[i] = i_tauIsoMVADBdR03newDMwLT[i];
                o_tauIsoMVAPWnewDMwLT[i] = i_tauIsoMVAPWnewDMwLT[i];
                o_tauIsoMVAPWoldDMwLT[i] = i_tauIsoMVAPWoldDMwLT[i];
                if(!isData){
                    o_lIsPrompt[i] = i_lIsPrompt[i];   
                    o_lMatchPdgId[i] = i_lMatchPdgId[i];   
                    o_lMatchCharge[i] = i_lMatchCharge[i];   
                    o_tauGenStatus[i] = i_tauGenStatus[i];   
                    o_lMomPdgId[i] = i_lMomPdgId[i];   
                    o_lProvenance[i] = i_lProvenance[i];   
                    o_lProvenanceCompressed[i] = i_lProvenanceCompressed[i];   
                    o_lProvenanceConversion[i] = i_lProvenanceConversion[i];   
                }
                o_lPtCorr[i] = i_lPtCorr[i];   
                o_lPtScaleUp[i] = i_lPtScaleUp[i];   
                o_lPtScaleDown[i] = i_lPtScaleDown[i];   
                o_lPtResUp[i] = i_lPtResUp[i];   
                o_lPtResDown[i] = i_lPtResDown[i];
            }
            for(unsigned i = 0; i < i_nLight; i++){
                o_lEtaSC[i] = i_lEtaSC[i];   
                o_lElectronSummer16MvaGP[i] = i_lElectronSummer16MvaGP[i];
                o_lElectronSummer16MvaHZZ[i] = i_lElectronSummer16MvaHZZ[i];
                o_lElectronMvaFall17v1NoIso[i] = i_lElectronMvaFall17v1NoIso[i];
                o_lElectronMvaFall17Iso[i] = i_lElectronMvaFall17Iso[i];
                o_lElectronMvaFall17NoIso[i] = i_lElectronMvaFall17NoIso[i];
                o_lElectronPassEmu[i] = i_lElectronPassEmu[i];   
                o_lElectronPassConvVeto[i] = i_lElectronPassConvVeto[i];   
                o_lElectronChargeConst[i] = i_lElectronChargeConst[i];   
                o_lElectronMissingHits[i] = i_lElectronMissingHits[i];   
                o_lElectronIsEB[i] = i_lElectronIsEB[i];
                o_lElectronIsEE[i] = i_lElectronIsEE[i];
                o_lElectronSuperClusterOverP[i] = i_lElectronSuperClusterOverP[i];
                o_lElectronEcalEnergy[i] = i_lElectronEcalEnergy[i];
                o_lElectronSigmaIetaIeta[i] = i_lElectronSigmaIetaIeta[i];
                o_lElectronDEtaInSeed[i] = i_lElectronDEtaInSeed[i];
                o_lElectronDeltaPhiSuperClusterTrack[i] = i_lElectronDeltaPhiSuperClusterTrack[i];
                o_lElectronDeltaEtaSuperClusterTrack[i] = i_lElectronDeltaEtaSuperClusterTrack[i];
                o_lElectronHOverE[i] = i_lElectronHOverE[i];
                o_lElectronEInvMinusPInv[i] = i_lElectronEInvMinusPInv[i];
                o_lElectronNumberInnerHitsMissing[i] = i_lElectronNumberInnerHitsMissing[i];
                o_leptonMvaTTH[i] = i_leptonMvaTTH[i];
                o_leptonMvatZq[i] = i_leptonMvatZq[i];
                if(hasLeptonMvaTOP) o_leptonMvaTOP[i] = i_leptonMvaTOP[i];
                else if(i_lFlavor[i] == 0) o_leptonMvaTOP[i] = mvahelper->leptonMvaElectron(i_lPt[i], i_lEta[i], i_selectedTrackMult[i], i_miniIsoCharged[i], i_miniIso[i] - i_miniIsoCharged[i], i_ptRel[i], i_ptRatio[i], i_closestJetDeepCsv[i], i_closestJetDeepFlavor[i], i_3dIPSig[i], i_dxy[i], i_dz[i], i_relIso[i], i_lElectronSummer16MvaGP[i], i_lElectronMvaFall17v1NoIso[i], i_lElectronMvaFall17NoIso[i]);
                else if(i_lFlavor[i] == 1) o_leptonMvaTOP[i] = mvahelper->leptonMvaMuon(i_lPt[i], i_lEta[i], i_selectedTrackMult[i], i_miniIsoCharged[i], i_miniIso[i] - i_miniIsoCharged[i], i_ptRel[i], i_ptRatio[i], i_closestJetDeepCsv[i], i_closestJetDeepFlavor[i], i_3dIPSig[i], i_dxy[i], i_dz[i], i_relIso[i], i_relIso[i], i_lMuonSegComp[i]);
                o_relIso[i] = i_relIso[i];   
                o_relIso0p4[i] = i_relIso0p4[i];   
                o_relIso0p4MuDeltaBeta[i] = i_relIso0p4MuDeltaBeta[i];   
                o_miniIso[i] = i_miniIso[i];   
                o_miniIsoCharged[i] = i_miniIsoCharged[i];   
                o_ptRel[i] = i_ptRel[i];   
                o_ptRatio[i] = i_ptRatio[i];   
                o_closestJetCsvV2[i] = i_closestJetCsvV2[i];   
                o_closestJetDeepCsv_b[i] = i_closestJetDeepCsv_b[i];   
                o_closestJetDeepCsv_bb[i] = i_closestJetDeepCsv_bb[i];   
                o_closestJetDeepCsv[i] = i_closestJetDeepCsv[i];   
                o_closestJetDeepFlavor_b[i] = i_closestJetDeepFlavor_b[i];   
                o_closestJetDeepFlavor_bb[i] = i_closestJetDeepFlavor_bb[i];   
                o_closestJetDeepFlavor_lepb[i] = i_closestJetDeepFlavor_lepb[i];   
                o_closestJetDeepFlavor[i] = i_closestJetDeepFlavor[i];   
                o_selectedTrackMult[i] = i_selectedTrackMult[i];   
                o_IVF_x[i] = i_IVF_x[i];
                o_IVF_y[i] = i_IVF_y[i];
                o_IVF_z[i] = i_IVF_z[i];
                o_IVF_cx[i] = i_IVF_cx[i];
                o_IVF_cy[i] = i_IVF_cy[i];
                o_IVF_cz[i] = i_IVF_cz[i];
                o_IVF_df[i] = i_IVF_df[i];
                o_IVF_chi2[i] = i_IVF_chi2[i];
                o_IVF_pt[i] = i_IVF_pt[i];
                o_IVF_eta[i] = i_IVF_eta[i];
                o_IVF_phi[i] = i_IVF_phi[i];
                o_IVF_E[i] = i_IVF_E[i];
                o_IVF_mass[i] = i_IVF_mass[i];
                o_IVF_ntracks[i] = i_IVF_ntracks[i];
                for(unsigned i2 = 0; i2 < 15; i2++){
                    o_IVF_trackpt[i][i2] = i_IVF_trackpt[i][i2];
                    o_IVF_tracketa[i][i2] = i_IVF_tracketa[i][i2];
                    o_IVF_trackphi[i][i2] = i_IVF_trackphi[i][i2];
                    o_IVF_trackE[i][i2] = i_IVF_trackE[i][i2];
                    o_IVF_trackcharge[i][i2] = i_IVF_trackcharge[i][i2];
                }
                o_lIVF_match[i] = i_lIVF_match[i];
            }
            for(unsigned i = 0; i < i_nMu; i++){
                o_lGlobalMuon[i] = i_lGlobalMuon[i];
                o_lTrackerMuon[i] = i_lTrackerMuon[i];
                o_lInnerTrackValidFraction[i] = i_lInnerTrackValidFraction[i];
                o_lGlobalTrackNormalizedChi2[i] = i_lGlobalTrackNormalizedChi2[i];
                o_lCQChi2Position[i] = i_lCQChi2Position[i];
                o_lCQTrackKink[i] = i_lCQTrackKink[i];
                o_lNumberOfMatchedStation[i] = i_lNumberOfMatchedStation[i];
                o_lNumberOfValidPixelHits[i] = i_lNumberOfValidPixelHits[i];
                o_lNumberOfValidTrackerHits[i] = i_lNumberOfValidTrackerHits[i];
                o_muNumberInnerHits[i] = i_muNumberInnerHits[i];
                o_lTrackerLayersWithMeasurement[i] = i_lTrackerLayersWithMeasurement[i];
                o_lMuonSegComp[i] = i_lMuonSegComp[i];   
                o_lMuonTrackPt[i] = i_lMuonTrackPt[i];   
                o_lMuonTrackPtErr[i] = i_lMuonTrackPtErr[i];   
                o_lMuonTimenDof[i] = i_lMuonTimenDof[i];
                o_lMuonTime[i] = i_lMuonTime[i];
                o_lMuonTimeErr[i] = i_lMuonTimeErr[i];
                o_lMuonRPCTimenDof[i] = i_lMuonRPCTimenDof[i];
                o_lMuonRPCTime[i] = i_lMuonRPCTime[i];
                o_lMuonRPCTimeErr[i] = i_lMuonRPCTimeErr[i];
            }
            o_nPh = i_nPh;
            for(unsigned i = 0; i < i_nPh; i++){
                o_phPt[i] = i_phPt[i];   
                o_phEta[i] = i_phEta[i];   
                o_phEtaSC[i] = i_phEtaSC[i];   
                o_phPhi[i] = i_phPhi[i];   
                o_phE[i] = i_phE[i];   
                o_phCutBasedLoose[i] = i_phCutBasedLoose[i];   
                o_phCutBasedMedium[i] = i_phCutBasedMedium[i];   
                o_phCutBasedTight[i] = i_phCutBasedTight[i];   
                o_phMva[i] = i_phMva[i];   
                o_phRandomConeChargedIsolation[i] = i_phRandomConeChargedIsolation[i];   
                o_phChargedIsolation[i] = i_phChargedIsolation[i];   
                o_phNeutralHadronIsolation[i] = i_phNeutralHadronIsolation[i];   
                o_phPhotonIsolation[i] = i_phPhotonIsolation[i];   
                o_phSigmaIetaIeta[i] = i_phSigmaIetaIeta[i];   
                o_phHadronicOverEm[i] = i_phHadronicOverEm[i];   
                o_phHadTowOverEm[i] = i_phHadTowOverEm[i];
                o_phPassElectronVeto[i] = i_phPassElectronVeto[i];   
                o_phHasPixelSeed[i] = i_phHasPixelSeed[i];   
                if(!isData){
                    o_phIsPrompt[i] = i_phIsPrompt[i];   
                    o_phMatchPdgId[i] = i_phMatchPdgId[i];   
                }
                o_phPtCorr[i] = i_phPtCorr[i];   
                o_phPtScaleUp[i] = i_phPtScaleUp[i];   
                o_phPtScaleDown[i] = i_phPtScaleDown[i];   
                o_phPtResUp[i] = i_phPtResUp[i];   
                o_phPtResDown[i] = i_phPtResDown[i];
            }
            o_nJets = i_nJets;
            for(unsigned i = 0; i < i_nJets; i++){
                o_jetPt[i] = i_jetPt[i];   
                o_jetPt_JECUp[i] = i_jetPt_JECUp[i];   
                o_jetPt_JECDown[i] = i_jetPt_JECDown[i];   
                o_jetPt_Uncorrected[i] = i_jetPt_Uncorrected[i];   
                o_jetPt_L1[i] = i_jetPt_L1[i];   
                o_jetPt_L2[i] = i_jetPt_L2[i];   
                o_jetPt_L3[i] = i_jetPt_L3[i];   
                o_jetSmearedPt[i] = i_jetSmearedPt[i];
                o_jetSmearedPt_JECDown[i] = i_jetSmearedPt_JECDown[i];
                o_jetSmearedPt_JECUp[i] = i_jetSmearedPt_JECUp[i];
                o_jetSmearedPt_JERDown[i] = i_jetSmearedPt_JERDown[i];
                o_jetSmearedPt_JERUp[i] = i_jetSmearedPt_JERUp[i];
                o_jetEta[i] = i_jetEta[i];   
                o_jetPhi[i] = i_jetPhi[i];   
                o_jetE[i] = i_jetE[i];   
                o_jetCsvV2[i] = i_jetCsvV2[i];   
                o_jetDeepCsv_udsg[i] = i_jetDeepCsv_udsg[i];   
                o_jetDeepCsv_b[i] = i_jetDeepCsv_b[i];   
                o_jetDeepCsv_c[i] = i_jetDeepCsv_c[i];   
                o_jetDeepCsv_bb[i] = i_jetDeepCsv_bb[i];   
                o_jetDeepCsv[i] = i_jetDeepCsv[i];   
                o_jetDeepFlavor_b[i] = i_jetDeepFlavor_b[i];   
                o_jetDeepFlavor_bb[i] = i_jetDeepFlavor_bb[i];   
                o_jetDeepFlavor_lepb[i] = i_jetDeepFlavor_lepb[i];   
                o_jetDeepFlavor[i] = i_jetDeepFlavor[i];   
                o_jetDeepFlavor_g[i] = i_jetDeepFlavor_g[i];   
                o_jetDeepFlavor_uds[i] = i_jetDeepFlavor_uds[i];   
                o_jetDeepFlavor_g[i] = i_jetDeepFlavor_g[i];   
                o_jetHadronFlavor[i] = i_jetHadronFlavor[i];   
                //o_jetIsLoose[i] = i_jetIsLoose[i];   
                o_jetIsTight[i] = i_jetIsTight[i];   
                o_jetIsTightLepVeto[i] = i_jetIsTightLepVeto[i];   
                o_jetNeutralHadronFraction[i] = i_jetNeutralHadronFraction[i];
                o_jetChargedHadronFraction[i] = i_jetChargedHadronFraction[i];
                o_jetNeutralEmFraction[i] = i_jetNeutralEmFraction[i];
                o_jetChargedEmFraction[i] = i_jetChargedEmFraction[i];
                o_jetHFHadronFraction[i] = i_jetHFHadronFraction[i];
                o_jetHFEmFraction[i] = i_jetHFEmFraction[i];
                o_nJetConstituents[i] = i_nJetConstituents[i];
                for(unsigned i2 = 0; i2 < 50; i2++){
                    o_JetConstituentPt[i][i2] = i_JetConstituentPt[i][i2];
                    o_JetConstituentEta[i][i2] = i_JetConstituentEta[i][i2];
                    o_JetConstituentPhi[i][i2] = i_JetConstituentPhi[i][i2];
                    o_JetConstituentMass[i][i2] = i_JetConstituentMass[i][i2];
                    o_JetConstituentPdgId[i][i2] = i_JetConstituentPdgId[i][i2];
                    o_JetConstituentPdgIdReduced[i][i2] = i_JetConstituentPdgIdReduced[i][i2];
                    o_JetConstituentCharge[i][i2] = i_JetConstituentCharge[i][i2];
                    o_JetConstituentdxy[i][i2] = i_JetConstituentdxy[i][i2];
                    o_JetConstituentdz[i][i2] = i_JetConstituentdz[i][i2];
                    o_JetConstituentdxyErr[i][i2] = i_JetConstituentdxyErr[i][i2];
                    o_JetConstituentdzErr[i][i2] = i_JetConstituentdzErr[i][i2];
                    o_JetConstituentNumberOfHits[i][i2] = i_JetConstituentNumberOfHits[i][i2];
                    o_JetConstituentNumberOfPixelHits[i][i2] = i_JetConstituentNumberOfPixelHits[i][i2];
                    o_JetConstituentHasTrack[i][i2] = i_JetConstituentHasTrack[i][i2];
                }
            }
            o_met = i_met;
            o_metRaw = i_metRaw;
            o_metJECDown = i_metJECDown;
            o_metJECUp = i_metJECUp;
            o_metUnclDown = i_metUnclDown;
            o_metUnclUp = i_metUnclUp;
            o_metPhi = i_metPhi;
            o_metRawPhi = i_metRawPhi;
            o_metPhiJECDown = i_metPhiJECDown;
            o_metPhiJECUp = i_metPhiJECUp;
            o_metPhiUnclDown = i_metPhiUnclDown;
            o_metPhiUnclUp = i_metPhiUnclUp;
            o_metSignificance = i_metSignificance;
            outputtree->Fill();
        }

        ++loop_counter;
    }
    std::cout << "--------------------------------" << std::endl;
}


Skimmer::~Skimmer()
{
    std::cout << "Writing and closing skimmed file" << std::endl;
    std::cout << "--------------------------------" << std::endl;
    output->Write();
    output->Close();
}
